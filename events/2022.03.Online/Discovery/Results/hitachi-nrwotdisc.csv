"ID","Status","Comment","Assertion"
"discoverer-must-support-intros","null","not testable with Assertion Tester","A Discoverer MUST support at least one Introduction mechanism."
"discoverer-must-support-fetching","null","not testable with Assertion Tester","A Discoverer MUST support fetching a TD from least one URL provided as part of the Introduction process."
"discoverer-may-multiple-intro","null","not testable with Assertion Tester","A Discoverer MAY support multiple invocations of the same Introduction mechanism."
"discoverer-merge-intros","null","not testable with Assertion Tester","A Discoverer MUST be able to merge URLs resulting from multiple Introduction mechanisms, multiple results from a single Introduction mechanism, and multiple Introduction invocations into a single set."
"discoverer-td-identify","null","not testable with Assertion Tester","A Discoverer MUST be able to identify whether a TD fetched from an Introduction URL is a Thing Description Directory or a Thing Link."
"discoverer-fetch-tdd","null","not testable with Assertion Tester","A Discoverer MAY fetch additional TDs from any Exploration mechanism described in its initial set of TDs (including, in particular, Thing Description Directories) and add them into the set of TD results."
"discoverer-fetch-links","null","not testable with Assertion Tester","A Discoverer MAY fetch source TDs from the targets of the links in a Thing Link described in its initial set of TDs and add them into the set of TD results."
"discoverer-fetch-iteration","null","not testable with Assertion Tester","A Discoverer MAY fetch additional TDs iteratively from any Thing Link or Exploration mechanism described in its set of TDs and add them into the set of TD results."
"discoverer-termination","null","not testable with Assertion Tester","A Discoverer MAY terminate fetching additional TDs at any point or for any reason."
"discoverer-any-order","null","not testable with Assertion Tester","A Discoverer MAY fetch additional TDs by following links or fetching additional TDs from Exploration mechanisms (e.g. TDDs) in any order."
"discoverer-track","null","not testable with Assertion Tester","A Discoverer MUST track which TDs describing links or Exploration mechanisms have already been fetched and avoid fetching duplicate results."
"introduction-direct-url","null","not testable with Assertion Tester","To obtain an URL of an exploration service, any mechanism that results in a single URL MAY be used."
"introduction-direct-thing-description","null","not testable with Assertion Tester","A request on all such URLs MUST result in a TD as prescribed in [[[#exploration-self]]]."
"introduction-direct-directory-description","null","not testable with Assertion Tester","If the URL references a Thing Description Directory, this MUST be the Directory Description of the Thing Description Directory."
"introduction-well-known-uri","null","not testable with Assertion Tester","A Thing or Thing Description Directory MAY use the Well-Known Uniform Resource Identifier [[RFC8615]] to advertise its presence."
"introduction-well-known-path","null","not testable with Assertion Tester","If the Thing or Thing Description Directory use the Well-Known Uniform Resource Identifier to advertise its presense, it MUST register its own Thing or Directory Description into the following path: /.well-known/wot-thing-description."
"introduction-well-known-thing-description","null","not testable with Assertion Tester","When a request is made at the above Well-Known URI, the server MUST return a Thing Description as prescribed in [[[#exploration-self]]]."
"introduction-dns-sd","null","not testable with Assertion Tester","A Thing or Thing Description Directory MAY use the DNS-Based Service Discovery (DNS-SD)[[RFC6763]]."
"introduction-dns-sd-service-name","null","not testable with Assertion Tester","The Service Name to indicate the Thing or Thing Description Directory MUST be _wot."
"introduction-dns-sd-service-name-directory","null","not testable with Assertion Tester","And the Service Name to indicate the Thing Description Directory MUST be _directory._sub._wot."
"introduction-dns-sd-txt-record","null","not testable with Assertion Tester","In addition, the following information MUST be included in the TXT record that is pointed to by the Service Instance Name:"
"introduction-core-rd","null","not testable with Assertion Tester","A Thing or Thing Description Directory MAY advertise its presence using the Constrained RESTful Environment (CoRE) Link Format [[RFC6690]]."
"introduction-core-rd-directory","null","not testable with Assertion Tester","A Thing or Thing Description Directory MAY use the CoRE Resource Directory [[CoRE-RD]] to register a link to the Thing or Directory Description."
"introduction-core-rd-resource-type-thing","null","not testable with Assertion Tester","The resource type (rt) of the Link that targets the Thing Description of the Thing MUST be wot.thing."
"introduction-core-rd-resource-type-directory","null","not testable with Assertion Tester","The resource type of the Link that targets the Directory Description of the Thing Description Directory MUST be wot.directory."
"introduction-did","null","not testable with Assertion Tester","A Thing or Thing Description Directory MAY advertise its presence using the Decentralized Identifier (DID) [[DID-CORE]]."
"introduction-did-service-endpoint","null","not testable with Assertion Tester","The DID Document obtained by resolving the DID of a Thing or Thing Description Directory MUST contains a Service Endpoint which point to Thing Description of the Thing or Directory Description of the Thing Description Directory."
"exploration-directory-description-type","null","not testable with Assertion Tester","A TD which describes a Thing Description Directory instance MUST use type `ThingDirectory` from the discovery context or URI `https://www.w3.org/2021/wot/discovery#ThingDirectory`."
"exploration-link-description-type","null","not testable with Assertion Tester","A TD which describes a reference to another TD MUST use type `ThingLink` from the discovery context or URI `https://www.w3.org/2021/wot/discovery#ThingLink`."
"exploration-link-description-link","null","not testable with Assertion Tester","A Thing Link MUST define the referenced TD as a Link with `describedby` link relation type, `application/td+json` media type and `href` set to the target URL."
"self-http-secure","null","not testable with Assertion Tester","The HTTP-based self-description SHOULD be over HTTPS (HTTP Over TLS)."
"self-http-access-control","null","not testable with Assertion Tester","The server SHOULD serve the requests after performing necessary authentication and authorization."
"self-http-method","null","not testable with Assertion Tester","The HTTP server MUST serve the TD with a `GET` method."
"self-http-resp","null","not testable with Assertion Tester","A successful response MUST have 200 (OK) status, contain `application/td+json` Content-Type header, and the TD in body."
"self-http-alternate-content","null","not testable with Assertion Tester","The server MAY provide alternative representations through server-driven content negotiation, that is by honouring the request's Accept header and responding with the supported TD serialization and equivalent Content-Type header."
"self-http-head","null","not testable with Assertion Tester","The HTTP server MUST respond to `HEAD` requests by returning only the headers equivalent to those returned by a `GET` request to the same endpoint."
"tdd-registrationinfo-expiry-purge","null","not testable with Assertion Tester","Servers SHOULD periodically purge TDs that are past their expiry times."
"tdd-registrationinfo-expiry-config","null","not testable with Assertion Tester","The servers MAY mandate or set a configurable upper limit to expiry times and refuse incompliant requests."
"tdd-reg-anonymous-td-identifier","null","not testable with Assertion Tester","In situations where the server exposes an Anonymous TD (e.g. retrieval, listing, search), it MUST add the local identifier to the TD to allow local referencing."
"tdd-reg-anonymous-td-local-id","null","not testable with Assertion Tester","The local identifier SHOULD be a UUID Version 4, presented as a URN [[RFC4122]]."
"tdd-https","null","not testable with Assertion Tester","The HTTP API MUST be exposed over HTTPS (HTTP Over TLS)."
"tdd-http-error-response","null","not testable with Assertion Tester","The HTTP API MUST use the Problem Details [[RFC7807]] format to carry error details in HTTP client error (4xx) and server error (5xx) responses."
"tdd-http-head","null","not testable with Assertion Tester","For each HTTP endpoint that responds to the `GET` method, the server MUST accept `HEAD` requests and return only the headers."
"tdd-http-missing-api-endpoint","null","not testable with Assertion Tester","If an API endpoint is not provided, the server SHOULD respond with 404 (Not Found)."
"tdd-reg-list-only","null","not testable with Assertion Tester","The API MUST provide the interface to list TDs."
"tdd-reg-crud","null","not testable with Assertion Tester","The API MAY provide the interfaces to create, read, update, and delete (CRUD) individual TDs."
"tdd-reg-crudl","null","not testable with Assertion Tester","Full HTTP directories SHOULD implement all of CRUDL (create, read, update, delete, and list) interfaces."
"tdd-reg-read-only-auth","null","not testable with Assertion Tester","To expose read-only access, the directory MUST enforce access control on create, update, and delete interfaces."
"tdd-reg-default-representation","null","not testable with Assertion Tester","The default serialization format for all request and success response bodies MUST be JSON, with JSON-LD 1.1 [[JSON-LD11]] syntax to support extensions and semantic processing."
"tdd-reg-additional-representation","null","not testable with Assertion Tester","Directories MAY accept additional representations based on request's indicated Content-Type or Content-Encoding, and provide additional representations through server-driven content negotiation."
"tdd-reg-create-known-vs-anonymous","null","not testable with Assertion Tester","A TD which is identified with an `id` attribute MUST be handled differently with one that has no identifier (Anonymous TD)."
"tdd-reg-create-known-td","null","not testable with Assertion Tester","A TD that has an `id` MUST be submitted to the directory in the body of an HTTP `PUT` request at `/things/{id}` endpoint, where `id` is the unique TD identifier, present inside the TD object."
"tdd-reg-create-known-contenttype","null","not testable with Assertion Tester","The request SHOULD contain `application/td+json` Content-Type header for JSON serialization of TD."
"tdd-reg-create-known-td-resp","null","not testable with Assertion Tester","Upon successful processing, the server MUST respond with 201 (Created) status."
"tdd-reg-create-anonymous-td","null","not testable with Assertion Tester","An Anonymous TD MUST be submitted to the directory in the body of an HTTP `POST` request at `/things` endpoint."
"tdd-reg-create-anonymous-contenttype","null","not testable with Assertion Tester","The request SHOULD contain `application/td+json` Content-Type header for JSON serialization of TD."
"tdd-reg-create-anonymous-td-resp","null","not testable with Assertion Tester","Upon successful processing, the server MUST respond with 201 (Created) status and a Location header containing a system-generated identifier for the TD."
"tdd-reg-retrieve","null","not testable with Assertion Tester","The retrieval of an existing TD MUST be done using an HTTP `GET` request at `/things/{id}` endpoint, where `id` is the unique TD identifier."
"tdd-reg-retrieve-resp","null","not testable with Assertion Tester","A successful response MUST have 200 (OK) status, contain `application/td+json` Content-Type header, and the requested TD in body."
"tdd-reg-update","null","not testable with Assertion Tester","A modified TD MUST replace an existing one when submitted using an HTTP `PUT` request at `/things/{id}` endpoint, where `id` is the identifier of the existing TD."
"tdd-reg-update-contenttype","null","not testable with Assertion Tester","The request SHOULD contain `application/td+json` Content-Type header for JSON serialization of TD."
"tdd-reg-update-resp","null","not testable with Assertion Tester","Upon success, the server MUST respond with 204 (No Content) status."
"tdd-reg-update-partial","null","not testable with Assertion Tester","An existing TD MUST be partially modified when the modified parts are submitted using an HTTP `PATCH` request at `/things/{id}` endpoint, where `id` is the identifier of the existing TD."
"tdd-reg-update-partial-mergepatch","null","not testable with Assertion Tester","The partial update MUST be processed using the JSON merge patch format format described in [[RFC7396]]."
"tdd-reg-update-partial-contenttype","null","not testable with Assertion Tester","The request MUST contain `application/merge-patch+json` Content-Type header for JSON serialization of the merge patch document."
"tdd-reg-update-partial-partialtd","null","not testable with Assertion Tester","The input MUST be in Partial TD form and conform to the original TD structure."
"tdd-reg-update-partial-resp","null","not testable with Assertion Tester","Upon success, the server MUST respond with a 204 (No Content) status."
"tdd-reg-delete","null","not testable with Assertion Tester","A delete operation MUST be done using an HTTP `DELETE` request at `/things/{id}`, where `id` is the identifier of the existing TD."
"tdd-reg-delete-resp","null","not testable with Assertion Tester","A successful response MUST have 204 (No Content) status."
"tdd-reg-list-method","null","not testable with Assertion Tester","The directory MUST allow retrieval of existing TDs using HTTP `GET` requests at the `/things` endpoint."
"tdd-reg-list-resp","null","not testable with Assertion Tester","A successful response MUST have 200 (OK) status, contain `application/ld+json` Content-Type header, and an array of TDs in the body."
"tdd-reg-list-pagination","null","not testable with Assertion Tester","The server MAY support pagination to return the collection in small subsets."
"tdd-reg-list-pagination-limit","null","not testable with Assertion Tester","When the `limit` query parameter is set to a positive integer, the server MAY respond with a subset of TDs totalling to less than or equal to the requested number."
"tdd-reg-list-pagination-header-nextlink","null","not testable with Assertion Tester","When there are more TDs after a returned subset of the collection, the response MUST contain a `next` Link header [[RFC8288]] with the URL of the next subset."
"tdd-reg-list-pagination-header-nextlink-attr","null","not testable with Assertion Tester","The `next` link MUST include all arguments needed to produce the same set of data and its ordering, in particular the same `limit` argument given on the initial request as well as a zero-based `offset` argument anchored at the beginning of the next subset."
"tdd-reg-list-pagination-header-nextlink-base","null","not testable with Assertion Tester","The link MUST be absolute or relative to directory API's base URL."
"tdd-reg-list-pagination-header-canonicallink","null","not testable with Assertion Tester","All paged responses MUST contain a `canonical` Link header [[RFC8288]] pointing to the collection and include an `etag` parameter to represent the current state of the collection."
"tdd-reg-list-pagination-order-default","null","not testable with Assertion Tester","By default, the collection MUST be sorted alphanumerically by the unique identifier of TDs."
"tdd-reg-list-pagination-order","null","not testable with Assertion Tester","The server MAY support sorting by other TD attributes using query arguments: `sort_by` to select a field (e.g. `created`) and `sort_order` to choose the order (i.e. `asc` or `desc` for ascending and descending ordering)."
"tdd-reg-list-pagination-order-unsupported","null","not testable with Assertion Tester","If the server does not support custom sorting, it MUST reject the request with 501 (Not Implemented) status."
"tdd-reg-list-pagination-order-nextlink","null","not testable with Assertion Tester","If sorting attributes are accepted, they MUST be added consistently to all `next` links."
"tdd-reg-list-pagination-collection","null","not testable with Assertion Tester","Alternative to a pure array of TDs as the body of the response, the server MAY send a more verbose payload allowing server-side information, like pagination information, to be put in addition to the actual data."
"tdd-validation-syntactic","null","not testable with Assertion Tester","The syntactic validation of TD objects before storage is RECOMMENDED to prevent common erroneous submissions."
"tdd-validation-jsonschema","null","not testable with Assertion Tester","The server MAY use Thing Description JSON Schema to validate standard TD vocabulary, or a more comprehensive JSON Schema to also validate extensions."
"tdd-validation-result","null","not testable with Assertion Tester","If the server fails to validate the TD object, it MUST inform the client with necessary details to identify and resolve the errors."
"tdd-validation-response","null","not testable with Assertion Tester","The validation error MUST be described as Problem Details [[RFC7807]] with an extension field called `validationErrors`, set to an array of objects with `field` and `description` fields."
"tdd-notification","null","not testable with Assertion Tester","Directories MAY implement the Notification API."
"tdd-notification-sse","null","not testable with Assertion Tester","The Notification API MUST follow the Server-Sent Events (SSE) [[EVENTSOURCE]] specifications to serve events to clients at `/events` endpoint."
"tdd-notification-event-id","null","not testable with Assertion Tester","The server SHOULD provide an event ID as the `id` field in each event and respond to re-connecting clients by delivering all missed events."
"tdd-notification-event-types","null","not testable with Assertion Tester","The server MUST produce events attributed to the lifecycle of the Thing Descriptions within the directory using `thing_created`, `thing_updated`, and `thing_deleted` event types."
"tdd-notification-filter-type","null","not testable with Assertion Tester","The server MUST support event filtering based on the event type given by the client upon subscription."
"tdd-notification-data","null","not testable with Assertion Tester","The event data MUST contain the JSON serialization of the event object."
"tdd-notification-data-td-id","null","not testable with Assertion Tester","The event data object MUST at least include the identifier of the TD created, updated, or deleted at that event in Partial TD form."
"tdd-notification-data-create-full","null","not testable with Assertion Tester","When `diff` query parameter is set to `true` and the event has `thing_created` type, the server MAY return the whole TD object as event data."
"tdd-notification-data-update-diff","null","not testable with Assertion Tester","When `diff` query parameter is set to `true` and the event has `thing_updated` type, the server MAY inform the client about the updated parts following the JSON Merge Patch [[RFC7396]] format."
"tdd-notification-data-update-id","null","not testable with Assertion Tester","A `thing_updated` event data that is based on JSON Merge Patch [[RFC7396]] MUST always include the identifier of the TD regardless of whether it is changed."
"tdd-notification-data-delete-diff","null","not testable with Assertion Tester","The `diff` query parameter MUST be ignored for `thing_deleted` events."
"tdd-notification-data-diff-unsupported","null","not testable with Assertion Tester","When a server which does not support the `diff` query parameter is requested with such query parameter, it MUST reject the request with 501 (Not Implemented) status."
"tdd-search-sparql","null","not testable with Assertion Tester","The Directory MAY implement semantic search with SPARQL."
"tdd-search-large-tdds","null","not testable with Assertion Tester","It is RECOMMENDED that directories implement a search API to efficiently serve TDs based on client-specific queries."
"tdd-search-sparql-version","null","not testable with Assertion Tester","If implemented, the SPARQL search API MUST allow searching TDs using the SPARQL 1.1 protocol [[sparql11-overview]]."
"tdd-search-sparql-method-get","null","not testable with Assertion Tester","The SPARQL API MUST accept queries using HTTP GET requests at `/search/sparql?query={query}` endpoint, where `query` is the SPARQL expression."
"tdd-search-sparql-method-post","null","not testable with Assertion Tester","The support for SPARQL search using HTTP POST method at `/search/sparql` endpoint is OPTIONAL."
"tdd-search-sparql-resp-select-ask","null","not testable with Assertion Tester","A successful request with a query SELECT or ASK MUST return a response 200 (OK) status, and contain by default as Content-Type header application/json."
"tdd-search-sparql-resp-describe-construct","null","not testable with Assertion Tester","A successful request with a query CONSTRUCT and DESCRIBE MUST return a response 200 (OK) status, and contain by default as Content-Type header application/ld+json."
"tdd-search-sparql-error","null","not testable with Assertion Tester","A request with any query different from SELECT, ASK, CONSTRUCT or DESCRIBE MUST return a response 400 (Bad Request)."
"tdd-search-sparql-federation","null","not testable with Assertion Tester","A WoT Thing Description Directory MAY implement federation in its SPARQL query API."
"tdd-search-sparql-federation-imp","null","not testable with Assertion Tester","If implemented, the SPARQL API MUST implement the SPARQL 1.1 Federated Query standard [[sparql11-overview]]."
