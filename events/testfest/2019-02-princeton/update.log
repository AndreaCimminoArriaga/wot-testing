Processing organization Hitachi
  in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Hitachi
Processing organization Intel
  in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel
  Processing implementation Intel/intel-camera
    in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-camera.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-camera.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-camera.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-camera.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-camera.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-camera.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-camera.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-camera.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-camera.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-camera.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
[ { keyword: 'const',
    dataPath: ".actions['crop']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['crop']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['region']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['region']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
[ { keyword: 'const',
    dataPath: ".actions['crop']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['crop']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['region']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['region']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
[ { keyword: 'const',
    dataPath: ".actions['region']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_uriVariables=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['region']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
[ { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['hue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['hue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['white_balance']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['white_balance']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['white_balance_auto']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['white_balance_auto']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure_auto']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure_auto']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure_auto_priority']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure_auto_priority']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['backlight_compensation']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['backlight_compensation']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['sharpness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['sharpness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['crop']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['crop']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['region']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['region']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
[ { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-integer-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-integer-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-integer-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-integer-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['hue']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-integer-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['hue']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['white_balance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-integer-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['white_balance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-integer-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['backlight_compensation']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-integer-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['backlight_compensation']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['sharpness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-integer-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['sharpness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['crop'].input.properties['xo']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-integer-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['crop'].input.properties['xo']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['crop'].input.properties['yo']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-integer-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['crop'].input.properties['yo']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['crop'].input.properties['x']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-integer-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['crop'].input.properties['x']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['crop'].input.properties['y']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-integer-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['crop'].input.properties['y']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['crop'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-action=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['hue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['hue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['white_balance']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['white_balance']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['white_balance_auto']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['white_balance_auto']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure_auto']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure_auto']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure_auto_priority']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure_auto_priority']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['backlight_compensation']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['backlight_compensation']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['sharpness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['sharpness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['frame']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['frame']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
[ { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['hue']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['hue']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['white_balance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['white_balance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['white_balance_auto']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['white_balance_auto']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure_auto']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure_auto']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure_auto_priority']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure_auto_priority']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['backlight_compensation']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['backlight_compensation']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['sharpness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['sharpness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
[ { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_maximum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_maximum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_maximum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_maximum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['hue']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_maximum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['hue']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['white_balance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_maximum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['white_balance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_maximum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['backlight_compensation']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_maximum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['backlight_compensation']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['sharpness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_maximum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['sharpness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
[ { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_minimum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_minimum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_minimum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_minimum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['hue']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_minimum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['hue']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['white_balance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_minimum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['white_balance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_minimum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['backlight_compensation']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_minimum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['backlight_compensation']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['sharpness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_minimum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['sharpness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['hue']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['hue']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['white_balance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['white_balance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['white_balance_auto']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['white_balance_auto']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure_auto']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure_auto']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure_auto_priority']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure_auto_priority']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['backlight_compensation']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['backlight_compensation']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['sharpness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['sharpness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['frame']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['frame']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['hue']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['hue']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['white_balance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['white_balance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['white_balance_auto']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['white_balance_auto']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure_auto']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure_auto']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure_auto_priority']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure_auto_priority']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['backlight_compensation']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['backlight_compensation']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['sharpness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['sharpness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['brightness'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[10]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[10]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[11]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[11]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[12]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[12]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[13]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[13]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[14]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[14]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[10]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[10]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[11]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[11]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[12]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[12]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[13]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[13]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[14]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[14]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[10]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[10]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  ... 276 more items ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['hue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['hue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['white_balance']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['white_balance']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['white_balance_auto']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['white_balance_auto']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure_auto']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure_auto']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure_auto_priority']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure_auto_priority']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['backlight_compensation']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['backlight_compensation']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['sharpness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['sharpness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['frame']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['frame']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['crop']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['crop']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['region']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['region']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
[ { keyword: 'const',
    dataPath: ".actions['crop']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-input=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['crop']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
[ { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['hue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['hue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['white_balance']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['white_balance']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['backlight_compensation']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['backlight_compensation']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['sharpness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['sharpness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
[ { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['hue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['hue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['white_balance']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['white_balance']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['backlight_compensation']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['backlight_compensation']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['sharpness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['sharpness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['crop'].input.properties['xo']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['crop'].input.properties['xo']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['crop'].input.properties['yo']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['crop'].input.properties['yo']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['crop'].input.properties['x']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['crop'].input.properties['x']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['crop'].input.properties['y']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['crop'].input.properties['y']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['crop'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['brightness'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[10]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[10]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[11]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[11]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[12]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[12]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[13]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[13]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[14]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[14]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[10]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[10]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[11]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[11]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[12]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[12]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[13]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[13]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[14]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[14]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[10]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[10]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  ... 276 more items ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".actions['crop'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['crop'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-rel=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
[ { keyword: 'const',
    dataPath: ".actions['crop'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['crop'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
[ { keyword: 'const',
    dataPath: ".actions['crop'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-response=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['crop'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['crop'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-response=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['crop'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['crop'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-response=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['crop'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['crop'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-response=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['crop'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['crop'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-response=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['crop'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['brightness'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[9]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[9]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[10]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[10]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[11]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[11]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[12]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[12]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[13]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[13]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[14]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[14]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[9]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[9]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[10]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[10]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[11]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[11]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[12]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[12]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[13]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[13]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast'].forms[14]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast'].forms[14]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[9]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[9]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[10]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[10]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[11]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[11]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[12]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[12]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[13]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[13]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation'].forms[14]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation'].forms[14]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['hue'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['hue'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['hue'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['hue'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['hue'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['hue'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['hue'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['hue'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['hue'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['hue'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['hue'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['hue'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['white_balance'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['white_balance'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['white_balance'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['white_balance'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  ... 196 more items ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['hue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['hue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['white_balance']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['white_balance']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['white_balance_auto']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['white_balance_auto']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure_auto']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure_auto']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure_auto_priority']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure_auto_priority']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['backlight_compensation']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['backlight_compensation']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['sharpness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['sharpness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['frame']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['frame']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['crop']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['crop']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['region']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['region']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['contrast']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['contrast']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['gamma']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['gamma']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['saturation']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['saturation']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['hue']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['hue']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['white_balance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['white_balance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['white_balance_auto']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['white_balance_auto']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure_auto']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure_auto']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['exposure_auto_priority']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['exposure_auto_priority']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['backlight_compensation']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['backlight_compensation']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['sharpness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['sharpness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['crop'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['crop'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
[ { keyword: 'const',
    dataPath: ".actions['region']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-uriVariables=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['region']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-camera.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-camera.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-camera.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-camera.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-camera.csv
  Processing implementation Intel/intel-speak
    in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-speak.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-speak.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-speak.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-speak.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-speak.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-speak.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-speak.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-speak.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-speak.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-speak.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-action=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
[ { keyword: 'const',
    dataPath: ".actions['say'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-string-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['say'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".actions['say'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['say'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['say'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['say'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['say'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['say'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['say'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['say'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['say'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['say'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".actions['say']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['say']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
[ { keyword: 'const',
    dataPath: ".actions['say']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-input=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['say']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".actions['say'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['say'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['say'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['say'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['say'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['say'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['say'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['say'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['say'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['say'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-rel=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".actions['say'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['say'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['say'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['say'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['say'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['say'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['say'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['say'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".actions['say'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['say'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-speak.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-speak.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-speak.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-speak.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-speak.csv
  Processing implementation Intel/intel-ocf
    under /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf
    Processing instance Intel/intel-ocf/button1touch
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/button1touch.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/button1touch.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/button1touch.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/button1touch.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/button1touch.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/button1touch.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/button1touch.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/button1touch.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/button1touch.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/button1touch.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-rel=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/button1touch.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/button1touch.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/button1touch.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/button1touch.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/button1touch.csv
    Processing instance Intel/intel-ocf/button2touch
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/button2touch.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/button2touch.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/button2touch.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/button2touch.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/button2touch.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/button2touch.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/button2touch.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/button2touch.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/button2touch.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/button2touch.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-rel=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/button2touch.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/button2touch.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/button2touch.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/button2touch.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/button2touch.csv
    Processing instance Intel/intel-ocf/buzzer0
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/buzzer0.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/buzzer0.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/buzzer0.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/buzzer0.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/buzzer0.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/buzzer0.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/buzzer0.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/buzzer0.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/buzzer0.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/buzzer0.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-rel=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/buzzer0.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/buzzer0.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/buzzer0.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/buzzer0.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/buzzer0.csv
    Processing instance Intel/intel-ocf/illuminance0
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/illuminance0.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/illuminance0.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/illuminance0.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/illuminance0.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/illuminance0.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/illuminance0.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/illuminance0.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/illuminance0.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/illuminance0.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/illuminance0.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-rel=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[9]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[9]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/illuminance0.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/illuminance0.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/illuminance0.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/illuminance0.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/illuminance0.csv
    Processing instance Intel/intel-ocf/illuminance2
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/illuminance2.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/illuminance2.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/illuminance2.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/illuminance2.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/illuminance2.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/illuminance2.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/illuminance2.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/illuminance2.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/illuminance2.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/illuminance2.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-rel=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['illuminance'].forms[9]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance'].forms[9]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['illuminance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/illuminance2.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/illuminance2.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/illuminance2.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/illuminance2.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/illuminance2.csv
    Processing instance Intel/intel-ocf/led0blue
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0blue.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0blue.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0blue.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0blue.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0blue.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0blue.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0blue.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0blue.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0blue.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0blue.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-action=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-rel=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0blue.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0blue.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0blue.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0blue.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0blue.csv
    Processing instance Intel/intel-ocf/led0green
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0green.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0green.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0green.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0green.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0green.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0green.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0green.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0green.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0green.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0green.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-action=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-rel=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0green.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0green.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0green.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0green.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0green.csv
    Processing instance Intel/intel-ocf/led0mosfet
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0mosfet.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0mosfet.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0mosfet.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0mosfet.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0mosfet.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0mosfet.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0mosfet.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0mosfet.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0mosfet.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0mosfet.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-action=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-rel=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0mosfet.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0mosfet.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0mosfet.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0mosfet.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0mosfet.csv
    Processing instance Intel/intel-ocf/led0red
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0red.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0red.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0red.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0red.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0red.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0red.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0red.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0red.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0red.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0red.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-action=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-rel=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0red.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0red.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led0red.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0red.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0red.csv
    Processing instance Intel/intel-ocf/led1mosfet
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led1mosfet.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led1mosfet.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led1mosfet.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led1mosfet.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led1mosfet.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led1mosfet.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led1mosfet.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led1mosfet.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led1mosfet.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led1mosfet.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-action=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-rel=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led1mosfet.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led1mosfet.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led1mosfet.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led1mosfet.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led1mosfet.csv
    Processing instance Intel/intel-ocf/led1red
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led1red.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led1red.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led1red.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led1red.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led1red.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led1red.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led1red.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led1red.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led1red.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led1red.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-action=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-rel=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led1red.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led1red.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led1red.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led1red.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led1red.csv
    Processing instance Intel/intel-ocf/led1relay
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led1relay.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led1relay.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led1relay.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led1relay.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led1relay.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led1relay.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led1relay.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led1relay.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led1relay.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led1relay.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-action=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-rel=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led1relay.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led1relay.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led1relay.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led1relay.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led1relay.csv
    Processing instance Intel/intel-ocf/led2mosfet
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2mosfet.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2mosfet.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2mosfet.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2mosfet.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2mosfet.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2mosfet.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2mosfet.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2mosfet.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2mosfet.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2mosfet.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-action=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-rel=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2mosfet.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2mosfet.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2mosfet.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2mosfet.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2mosfet.csv
    Processing instance Intel/intel-ocf/led2relay
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2relay.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2relay.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2relay.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2relay.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2relay.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2relay.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2relay.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2relay.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2relay.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2relay.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-action=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-rel=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2relay.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2relay.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2relay.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2relay.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2relay.csv
    Processing instance Intel/intel-ocf/led2side
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2side.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2side.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2side.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2side.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2side.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2side.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2side.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2side.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2side.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2side.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-action=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-rel=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2side.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2side.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2side.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2side.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2side.csv
    Processing instance Intel/intel-ocf/led2top
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2top.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2top.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2top.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2top.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2top.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2top.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2top.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2top.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2top.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2top.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-action=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-rel=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['off']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['off']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2top.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2top.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/led2top.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2top.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2top.csv
    Processing instance Intel/intel-ocf/motion0
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/motion0.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/motion0.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/motion0.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/motion0.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/motion0.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/motion0.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/motion0.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/motion0.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/motion0.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/motion0.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['motion'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['motion'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-rel=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['motion'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[9]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[9]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/motion0.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/motion0.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/motion0.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/motion0.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/motion0.csv
    Processing instance Intel/intel-ocf/motion1
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/motion1.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/motion1.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/motion1.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/motion1.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/motion1.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/motion1.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/motion1.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/motion1.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/motion1.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/motion1.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['motion'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['motion'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-rel=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['motion'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[9]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[9]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/motion1.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/motion1.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/motion1.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/motion1.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/motion1.csv
    Processing instance Intel/intel-ocf/motion2
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/motion2.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/motion2.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/motion2.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/motion2.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/motion2.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/motion2.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/motion2.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/motion2.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/motion2.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/motion2.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['motion'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['motion'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-rel=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['motion'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['motion'].forms[9]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion'].forms[9]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motion']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/motion2.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/motion2.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/motion2.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/motion2.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/motion2.csv
    Processing instance Intel/intel-ocf/rgbled1
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/rgbled1.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/rgbled1.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/rgbled1.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/rgbled1.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/rgbled1.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/rgbled1.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/rgbled1.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/rgbled1.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/rgbled1.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/rgbled1.jsonld  for validation
JSON validation... OK
VALIDATION ERROR!!! :  data.properties['colour'].properties['rgbValue'].items should be object
test result is  false
INVALID TD STOPPING
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/rgbled1.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/rgbled1.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/rgbled1.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/rgbled1.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/rgbled1.csv
    Processing instance Intel/intel-ocf/temperature0
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/temperature0.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/temperature0.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/temperature0.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/temperature0.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/temperature0.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/temperature0.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/temperature0.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/temperature0.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/temperature0.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/temperature0.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['temperature'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['temperature'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-rel=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['temperature'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[9]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[9]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/temperature0.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/temperature0.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/temperature0.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/temperature0.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/temperature0.csv
    Processing instance Intel/intel-ocf/temperature1
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/temperature1.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/temperature1.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/temperature1.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/temperature1.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/temperature1.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/temperature1.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/temperature1.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/temperature1.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/temperature1.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/temperature1.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['temperature'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['temperature'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-rel=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['temperature'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[9]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[9]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/temperature1.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/temperature1.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/temperature1.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/temperature1.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/temperature1.csv
    Processing instance Intel/intel-ocf/temperature2
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/temperature2.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/temperature2.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/temperature2.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/temperature2.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/temperature2.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/temperature2.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/temperature2.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/temperature2.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/temperature2.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/temperature2.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['temperature'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['temperature'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-rel=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['temperature'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[9]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[9]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/temperature2.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/temperature2.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/temperature2.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/temperature2.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/temperature2.csv
    Processing instance Intel/intel-ocf/toggle0
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/toggle0.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/toggle0.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/toggle0.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/toggle0.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/toggle0.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/toggle0.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/toggle0.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/toggle0.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/toggle0.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/toggle0.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-rel=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/toggle0.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/toggle0.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/toggle0.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/toggle0.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/toggle0.csv
    Processing instance Intel/intel-ocf/toggle1
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/toggle1.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/toggle1.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/toggle1.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/toggle1.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/toggle1.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/toggle1.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/toggle1.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/toggle1.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/toggle1.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/toggle1.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-rel=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/toggle1.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/toggle1.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/toggle1.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/toggle1.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/toggle1.csv
    Processing instance Intel/intel-ocf/toggle2
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/toggle2.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/toggle2.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/toggle2.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/toggle2.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/toggle2.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/toggle2.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/toggle2.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/toggle2.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/toggle2.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/toggle2.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-rel=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[6]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[7]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[8]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[9]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/toggle2.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/toggle2.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf/toggle2.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/toggle2.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/toggle2.csv
>>>>>>>>>>>> Merge: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/button1touch.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/button2touch.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/buzzer0.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/illuminance0.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/illuminance2.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0blue.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0green.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0mosfet.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0red.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led1mosfet.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led1red.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led1relay.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2mosfet.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2relay.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2side.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2top.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/motion0.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/motion1.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/motion2.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/rgbled1.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/temperature0.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/temperature1.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/temperature2.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/toggle0.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/toggle1.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/toggle2.csv
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Intel/intel-ocf.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/button1touch.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/button2touch.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/buzzer0.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/illuminance0.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/illuminance2.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0blue.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0green.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0mosfet.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led0red.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led1mosfet.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led1red.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led1relay.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2mosfet.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2relay.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2side.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/led2top.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/motion0.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/motion1.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/motion2.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/rgbled1.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/temperature0.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/temperature1.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/temperature2.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/toggle0.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/toggle1.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf/toggle2.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Intel/intel-ocf.csv
Processing organization Oracle
  in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle
  Processing implementation Oracle/oracle-simulators
    under /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators
    Processing instance Oracle/oracle-simulators/Blue_Pump_Events
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Blue_Pump_Events.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Blue_Pump_Events.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Blue_Pump_Events.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Blue_Pump_Events.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Blue_Pump_Events.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Blue_Pump_Events.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Blue_Pump_Events.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Blue_Pump_Events.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Blue_Pump_Events.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Blue_Pump_Events.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
[ { keyword: 'const',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
[ { keyword: 'const',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/else/then/const',
    params: { allowedValue: 'td-additional-contexts=not-impl' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['alert']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['alert']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['filterClogged']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['filterClogged']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
[ { keyword: 'const',
    dataPath: ".events['alert']",
    schemaPath: '#/definitions/event_element/then/const',
    params: { allowedValue: 'td-event-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['alert']",
    schemaPath: '#/definitions/event_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['filterClogged']",
    schemaPath: '#/definitions/event_element/then/const',
    params: { allowedValue: 'td-event-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['filterClogged']",
    schemaPath: '#/definitions/event_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
[ { keyword: 'const',
    dataPath: ".events['alert']",
    schemaPath: '#/definitions/event_element/then/const',
    params: { allowedValue: 'td-event-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['alert']",
    schemaPath: '#/definitions/event_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['filterClogged']",
    schemaPath: '#/definitions/event_element/then/const',
    params: { allowedValue: 'td-event-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['filterClogged']",
    schemaPath: '#/definitions/event_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
[ { keyword: 'const',
    dataPath:
     ".events['filterClogged'].subscription.properties['subscriptionID']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-integer-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".events['filterClogged'].subscription.properties['subscriptionID']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".events['filterClogged'].subscription",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath:
     ".events['filterClogged'].cancellation.properties['subscriptionID']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-integer-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".events['filterClogged'].cancellation.properties['subscriptionID']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".events['filterClogged'].cancellation",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-action=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-event=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
[ { keyword: 'const',
    dataPath:
     ".events['filterClogged'].subscription.properties['targetURL']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-string-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".events['filterClogged'].subscription.properties['targetURL']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['filterClogged'].subscription.properties['name']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-string-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['filterClogged'].subscription.properties['name']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath:
     ".events['filterClogged'].subscription.properties['description']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-string-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".events['filterClogged'].subscription.properties['description']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['filterClogged'].subscription.properties['type']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-string-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['filterClogged'].subscription.properties['type']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath:
     ".events['filterClogged'].subscription.properties['sharedSecret']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-string-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".events['filterClogged'].subscription.properties['sharedSecret']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath:
     ".events['filterClogged'].subscription.properties['authType']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-string-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".events['filterClogged'].subscription.properties['authType']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath:
     ".events['filterClogged'].subscription.properties['authConfig'].properties['username']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-string-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".events['filterClogged'].subscription.properties['authConfig'].properties['username']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath:
     ".events['filterClogged'].subscription.properties['authConfig'].properties['password']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-string-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".events['filterClogged'].subscription.properties['authConfig'].properties['password']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath:
     ".events['filterClogged'].subscription.properties['authConfig']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".events['filterClogged'].subscription",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
[ { keyword: 'const',
    dataPath: ".events['filterClogged']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-event-names_cancellation=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['filterClogged']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: '.forms[0]',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.forms[0]',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath:
     ".properties['Cycle_Peak_Operation_Percent_Of_Minute'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".properties['Cycle_Peak_Operation_Percent_Of_Minute'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['diagnose'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['diagnose'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['resetFilter'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['resetFilter'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['alert'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['alert'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['alert'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['alert'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['filterClogged'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['filterClogged'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['filterClogged'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['filterClogged'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
[ { keyword: 'const',
    dataPath: ".events['filterClogged']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-event-names_data=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['filterClogged']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['alert']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['alert']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['filterClogged']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['filterClogged']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
[ { keyword: 'const',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['basic_sc']",
    schemaPath: '#/definitions/securityScheme/then/const',
    params: { allowedValue: 'td-vocab-in=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['basic_sc']",
    schemaPath: '#/definitions/securityScheme/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
[ { keyword: 'const',
    dataPath: ".actions['power']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-input=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
[ { keyword: 'const',
    dataPath:
     ".events['filterClogged'].subscription.properties['streams']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-items=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".events['filterClogged'].subscription.properties['streams']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".events['filterClogged'].subscription",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: '.forms[0]',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.forms[0]',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath:
     ".properties['Cycle_Peak_Operation_Percent_Of_Minute'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".properties['Cycle_Peak_Operation_Percent_Of_Minute'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['alert'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['alert'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['alert'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['alert'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['filterClogged'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['filterClogged'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['filterClogged'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['filterClogged'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
[ { keyword: 'const',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-output=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-output=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-output=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath:
     ".events['filterClogged'].subscription.properties['authConfig']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".events['filterClogged'].subscription.properties['authConfig']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['filterClogged'].subscription.properties['config']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['filterClogged'].subscription.properties['config']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".events['filterClogged'].subscription",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath: ".events['filterClogged'].data",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['filterClogged'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['filterClogged'].cancellation",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['filterClogged'].cancellation",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['diagnose'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['diagnose'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['resetFilter'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['resetFilter'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath:
     ".events['filterClogged'].subscription.properties['subscriptionID']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".events['filterClogged'].subscription.properties['subscriptionID']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".events['filterClogged'].subscription",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
[ { keyword: 'const',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-safe=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-safe=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-safe=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
[ { keyword: 'const',
    dataPath: ".events['filterClogged']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-event-names_subscription=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['filterClogged']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['alert']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['alert']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['filterClogged']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['filterClogged']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['filterClogged'].subscription",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['filterClogged'].subscription",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['filterClogged'].data",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['filterClogged'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['filterClogged'].cancellation",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['filterClogged'].cancellation",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['diagnose'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['diagnose'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['resetFilter'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['resetFilter'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath:
     ".events['filterClogged'].subscription.properties['targetURL']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".events['filterClogged'].subscription.properties['targetURL']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".events['filterClogged'].subscription",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath: ".events['filterClogged'].data.properties['filterClogged']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['filterClogged'].data.properties['filterClogged']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".events['filterClogged'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath:
     ".events['filterClogged'].cancellation.properties['subscriptionID']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".events['filterClogged'].cancellation.properties['subscriptionID']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".events['filterClogged'].cancellation",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Blue_Pump_Events.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Blue_Pump_Events.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Blue_Pump_Events.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Blue_Pump_Events.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Blue_Pump_Events.csv
    Processing instance Oracle/oracle-simulators/Blue_Pump_Shared
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Blue_Pump_Shared.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Blue_Pump_Shared.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Blue_Pump_Shared.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Blue_Pump_Shared.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Blue_Pump_Shared.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Blue_Pump_Shared.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Blue_Pump_Shared.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Blue_Pump_Shared.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Blue_Pump_Shared.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Blue_Pump_Shared.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
[ { keyword: 'const',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
[ { keyword: 'const',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/else/then/const',
    params: { allowedValue: 'td-additional-contexts=not-impl' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-action=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath:
     ".properties['Cycle_Peak_Operation_Percent_Of_Minute'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".properties['Cycle_Peak_Operation_Percent_Of_Minute'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['diagnose'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['diagnose'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['resetFilter'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['resetFilter'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
[ { keyword: 'const',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['basic_sc']",
    schemaPath: '#/definitions/securityScheme/then/const',
    params: { allowedValue: 'td-vocab-in=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['basic_sc']",
    schemaPath: '#/definitions/securityScheme/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
[ { keyword: 'const',
    dataPath: ".actions['power']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-input=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath:
     ".properties['Cycle_Peak_Operation_Percent_Of_Minute'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".properties['Cycle_Peak_Operation_Percent_Of_Minute'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
[ { keyword: 'const',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-output=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-output=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-output=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['diagnose'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['diagnose'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['resetFilter'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['resetFilter'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
[ { keyword: 'const',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-safe=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-safe=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-safe=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['diagnose']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['resetFilter']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Maximum_Inlet_Pressure']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Min']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Return_Pressure_Max']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Min']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Cases_Pressure_Max']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Cycle_Peak_Operation_Percent_Of_Minute']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['diagnose'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['diagnose'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['resetFilter'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['resetFilter'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Blue_Pump_Shared.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Blue_Pump_Shared.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Blue_Pump_Shared.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Blue_Pump_Shared.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Blue_Pump_Shared.csv
    Processing instance Oracle/oracle-simulators/Connected_Car_Shared
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Connected_Car_Shared.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Connected_Car_Shared.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Connected_Car_Shared.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Connected_Car_Shared.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Connected_Car_Shared.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Connected_Car_Shared.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Connected_Car_Shared.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Connected_Car_Shared.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Connected_Car_Shared.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Connected_Car_Shared.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
[ { keyword: 'const',
    dataPath: ".actions['brake']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['brake']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['firmwareUpdate']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['firmwareUpdate']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['lockDoor']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['lockDoor']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['unlockDoor']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['unlockDoor']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
[ { keyword: 'const',
    dataPath: ".actions['brake']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['brake']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['firmwareUpdate']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['firmwareUpdate']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['lockDoor']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['lockDoor']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['unlockDoor']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['unlockDoor']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/else/then/const',
    params: { allowedValue: 'td-additional-contexts=not-impl' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
[ { keyword: 'const',
    dataPath: ".actions['brake']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['brake']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['firmwareUpdate']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['firmwareUpdate']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['lockDoor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['lockDoor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['unlockDoor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['unlockDoor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
[ { keyword: 'const',
    dataPath: ".actions['brake'].input.properties['value']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-number-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['brake'].input.properties['value']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['brake'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-action=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['ASCD']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ASCD']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ActiveParkAssist']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ActiveParkAssist']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['AdaptiveCruiseControl']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['AdaptiveCruiseControl']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['AutomaticBrakeActuator']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['AutomaticBrakeActuator']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['BlindSpotDetection']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['BlindSpotDetection']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CentralComputer']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CentralComputer']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CollisionSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CollisionSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CrossTrafficAlert']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CrossTrafficAlert']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['DrowsinessSensors']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['DrowsinessSensors']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontAirbagSensors']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontAirbagSensors']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontObjectCCDCameraURI']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontObjectCCDCameraURI']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontObjectLaserRadar']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontObjectLaserRadar']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['LaneDepartureSystem']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['LaneDepartureSystem']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NightVision']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NightVision']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NighttimePedestrianIRSensorURI']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NighttimePedestrianIRSensorURI']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NighttimePedestrianWarning']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NighttimePedestrianWarning']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearCamera']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearCamera']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearObjectLaserRadar']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearObjectLaserRadar']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearObjectMonitorCCDCamera']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearObjectMonitorCCDCamera']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['SideCurtainSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['SideCurtainSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['SteeringAngleSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['SteeringAngleSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['TirePressureSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['TirePressureSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['WheelSpeedSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['WheelSpeedSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_uncertainty']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_uncertainty']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['ASCD']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ASCD']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ActiveParkAssist']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ActiveParkAssist']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['AdaptiveCruiseControl']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['AdaptiveCruiseControl']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['AutomaticBrakeActuator']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['AutomaticBrakeActuator']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['BlindSpotDetection']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['BlindSpotDetection']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CentralComputer']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CentralComputer']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CollisionSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CollisionSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CrossTrafficAlert']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CrossTrafficAlert']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['DrowsinessSensors']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['DrowsinessSensors']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontAirbagSensors']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontAirbagSensors']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontObjectCCDCameraURI']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontObjectCCDCameraURI']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontObjectLaserRadar']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontObjectLaserRadar']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['LaneDepartureSystem']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['LaneDepartureSystem']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NightVision']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NightVision']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NighttimePedestrianIRSensorURI']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NighttimePedestrianIRSensorURI']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NighttimePedestrianWarning']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NighttimePedestrianWarning']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearCamera']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearCamera']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearObjectLaserRadar']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearObjectLaserRadar']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearObjectMonitorCCDCamera']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearObjectMonitorCCDCamera']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['SideCurtainSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['SideCurtainSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['SteeringAngleSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['SteeringAngleSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['TirePressureSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['TirePressureSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['WheelSpeedSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['WheelSpeedSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_uncertainty']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_uncertainty']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['ASCD']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ASCD']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ActiveParkAssist']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ActiveParkAssist']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['AdaptiveCruiseControl']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['AdaptiveCruiseControl']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['AutomaticBrakeActuator']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['AutomaticBrakeActuator']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['BlindSpotDetection']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['BlindSpotDetection']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CentralComputer']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CentralComputer']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CollisionSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CollisionSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CrossTrafficAlert']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CrossTrafficAlert']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['DrowsinessSensors']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['DrowsinessSensors']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontAirbagSensors']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontAirbagSensors']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontObjectCCDCameraURI']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontObjectCCDCameraURI']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontObjectLaserRadar']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontObjectLaserRadar']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['LaneDepartureSystem']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['LaneDepartureSystem']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NightVision']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NightVision']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NighttimePedestrianIRSensorURI']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NighttimePedestrianIRSensorURI']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NighttimePedestrianWarning']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NighttimePedestrianWarning']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearCamera']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearCamera']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearObjectLaserRadar']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearObjectLaserRadar']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearObjectMonitorCCDCamera']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearObjectMonitorCCDCamera']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['SideCurtainSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['SideCurtainSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['SteeringAngleSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['SteeringAngleSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['TirePressureSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['TirePressureSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['WheelSpeedSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['WheelSpeedSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_uncertainty']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_uncertainty']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['ASCD']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ASCD']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ActiveParkAssist']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ActiveParkAssist']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['AdaptiveCruiseControl']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['AdaptiveCruiseControl']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['AutomaticBrakeActuator']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['AutomaticBrakeActuator']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['BlindSpotDetection']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['BlindSpotDetection']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CentralComputer']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CentralComputer']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CollisionSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CollisionSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CrossTrafficAlert']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CrossTrafficAlert']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['DrowsinessSensors']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['DrowsinessSensors']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontAirbagSensors']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontAirbagSensors']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontObjectCCDCameraURI']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontObjectCCDCameraURI']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontObjectLaserRadar']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontObjectLaserRadar']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['LaneDepartureSystem']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['LaneDepartureSystem']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NightVision']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NightVision']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NighttimePedestrianIRSensorURI']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NighttimePedestrianIRSensorURI']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NighttimePedestrianWarning']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NighttimePedestrianWarning']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearCamera']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearCamera']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearObjectLaserRadar']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearObjectLaserRadar']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearObjectMonitorCCDCamera']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearObjectMonitorCCDCamera']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['SideCurtainSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['SideCurtainSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['SteeringAngleSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['SteeringAngleSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['TirePressureSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['TirePressureSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['WheelSpeedSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['WheelSpeedSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_uncertainty']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_uncertainty']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['ASCD']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ASCD']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ActiveParkAssist']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ActiveParkAssist']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['AdaptiveCruiseControl']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['AdaptiveCruiseControl']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['AutomaticBrakeActuator']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['AutomaticBrakeActuator']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['BlindSpotDetection']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['BlindSpotDetection']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CentralComputer']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CentralComputer']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CollisionSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CollisionSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CrossTrafficAlert']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CrossTrafficAlert']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['DrowsinessSensors']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['DrowsinessSensors']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontAirbagSensors']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontAirbagSensors']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontObjectCCDCameraURI']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontObjectCCDCameraURI']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontObjectLaserRadar']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontObjectLaserRadar']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['LaneDepartureSystem']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['LaneDepartureSystem']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NightVision']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NightVision']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NighttimePedestrianIRSensorURI']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NighttimePedestrianIRSensorURI']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NighttimePedestrianWarning']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NighttimePedestrianWarning']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearCamera']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearCamera']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearObjectLaserRadar']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearObjectLaserRadar']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearObjectMonitorCCDCamera']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearObjectMonitorCCDCamera']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['SideCurtainSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['SideCurtainSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['SteeringAngleSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['SteeringAngleSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['TirePressureSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['TirePressureSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['WheelSpeedSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['WheelSpeedSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_uncertainty']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_uncertainty']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['ASCD']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ASCD']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ActiveParkAssist']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ActiveParkAssist']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['AdaptiveCruiseControl']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['AdaptiveCruiseControl']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['AutomaticBrakeActuator']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['AutomaticBrakeActuator']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['BlindSpotDetection']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['BlindSpotDetection']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CentralComputer']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CentralComputer']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CollisionSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CollisionSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CrossTrafficAlert']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CrossTrafficAlert']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['DrowsinessSensors']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['DrowsinessSensors']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontAirbagSensors']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontAirbagSensors']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontObjectCCDCameraURI']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontObjectCCDCameraURI']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontObjectLaserRadar']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontObjectLaserRadar']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['LaneDepartureSystem']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['LaneDepartureSystem']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NightVision']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NightVision']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NighttimePedestrianIRSensorURI']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NighttimePedestrianIRSensorURI']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NighttimePedestrianWarning']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NighttimePedestrianWarning']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearCamera']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearCamera']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearObjectLaserRadar']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearObjectLaserRadar']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearObjectMonitorCCDCamera']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearObjectMonitorCCDCamera']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['SideCurtainSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['SideCurtainSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['SteeringAngleSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['SteeringAngleSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['TirePressureSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['TirePressureSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['WheelSpeedSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['WheelSpeedSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_uncertainty']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_uncertainty']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
[ { keyword: 'const',
    dataPath: ".actions['firmwareUpdate'].input.properties['value']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-string-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['firmwareUpdate'].input.properties['value']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['firmwareUpdate'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['ASCD'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ASCD'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ActiveParkAssist'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ActiveParkAssist'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['AdaptiveCruiseControl'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['AdaptiveCruiseControl'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['AutomaticBrakeActuator'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['AutomaticBrakeActuator'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['BlindSpotDetection'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['BlindSpotDetection'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CentralComputer'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CentralComputer'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CollisionSensor'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CollisionSensor'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CrossTrafficAlert'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CrossTrafficAlert'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['DrowsinessSensors'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['DrowsinessSensors'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontAirbagSensors'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontAirbagSensors'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontObjectCCDCameraURI'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontObjectCCDCameraURI'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontObjectLaserRadar'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontObjectLaserRadar'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['LaneDepartureSystem'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['LaneDepartureSystem'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NightVision'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NightVision'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NighttimePedestrianIRSensorURI'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NighttimePedestrianIRSensorURI'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NighttimePedestrianWarning'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NighttimePedestrianWarning'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearCamera'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearCamera'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearObjectLaserRadar'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearObjectLaserRadar'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearObjectMonitorCCDCamera'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearObjectMonitorCCDCamera'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['SideCurtainSensor'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['SideCurtainSensor'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['SteeringAngleSensor'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['SteeringAngleSensor'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['TirePressureSensor'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['TirePressureSensor'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['WheelSpeedSensor'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['WheelSpeedSensor'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_altitude'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_altitude'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_latitude'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_latitude'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_longitude'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_longitude'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_uncertainty'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_uncertainty'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['brake'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['brake'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['firmwareUpdate'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['firmwareUpdate'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['lockDoor'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['lockDoor'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['unlockDoor'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['unlockDoor'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['ASCD']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ASCD']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ActiveParkAssist']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ActiveParkAssist']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['AdaptiveCruiseControl']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['AdaptiveCruiseControl']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['AutomaticBrakeActuator']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['AutomaticBrakeActuator']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['BlindSpotDetection']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['BlindSpotDetection']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CentralComputer']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CentralComputer']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CollisionSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CollisionSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CrossTrafficAlert']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CrossTrafficAlert']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['DrowsinessSensors']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['DrowsinessSensors']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontAirbagSensors']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontAirbagSensors']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontObjectCCDCameraURI']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontObjectCCDCameraURI']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontObjectLaserRadar']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontObjectLaserRadar']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['LaneDepartureSystem']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['LaneDepartureSystem']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NightVision']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NightVision']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NighttimePedestrianIRSensorURI']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NighttimePedestrianIRSensorURI']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NighttimePedestrianWarning']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NighttimePedestrianWarning']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearCamera']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearCamera']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearObjectLaserRadar']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearObjectLaserRadar']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearObjectMonitorCCDCamera']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearObjectMonitorCCDCamera']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['SideCurtainSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['SideCurtainSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['SteeringAngleSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['SteeringAngleSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['TirePressureSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['TirePressureSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['WheelSpeedSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['WheelSpeedSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_uncertainty']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_uncertainty']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['brake']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['brake']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['firmwareUpdate']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['firmwareUpdate']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['lockDoor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['lockDoor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['unlockDoor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['unlockDoor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
[ { keyword: 'const',
    dataPath: ".actions['brake']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['brake']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['firmwareUpdate']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['firmwareUpdate']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['lockDoor']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['lockDoor']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['unlockDoor']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['unlockDoor']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['basic_sc']",
    schemaPath: '#/definitions/securityScheme/then/const',
    params: { allowedValue: 'td-vocab-in=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['basic_sc']",
    schemaPath: '#/definitions/securityScheme/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
[ { keyword: 'const',
    dataPath: ".actions['brake']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-input=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['brake']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['firmwareUpdate']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-input=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['firmwareUpdate']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['ASCD'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ASCD'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ActiveParkAssist'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ActiveParkAssist'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['AdaptiveCruiseControl'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['AdaptiveCruiseControl'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['AutomaticBrakeActuator'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['AutomaticBrakeActuator'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['BlindSpotDetection'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['BlindSpotDetection'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CentralComputer'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CentralComputer'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CollisionSensor'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CollisionSensor'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CrossTrafficAlert'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CrossTrafficAlert'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['DrowsinessSensors'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['DrowsinessSensors'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontAirbagSensors'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontAirbagSensors'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontObjectCCDCameraURI'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontObjectCCDCameraURI'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontObjectLaserRadar'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontObjectLaserRadar'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['LaneDepartureSystem'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['LaneDepartureSystem'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NightVision'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NightVision'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NighttimePedestrianIRSensorURI'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NighttimePedestrianIRSensorURI'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NighttimePedestrianWarning'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NighttimePedestrianWarning'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearCamera'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearCamera'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearObjectLaserRadar'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearObjectLaserRadar'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearObjectMonitorCCDCamera'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearObjectMonitorCCDCamera'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['SideCurtainSensor'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['SideCurtainSensor'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['SteeringAngleSensor'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['SteeringAngleSensor'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['TirePressureSensor'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['TirePressureSensor'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['WheelSpeedSensor'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['WheelSpeedSensor'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_altitude'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_altitude'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_latitude'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_latitude'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_longitude'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_longitude'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_uncertainty'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_uncertainty'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
[ { keyword: 'const',
    dataPath: ".actions['brake']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-output=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['brake']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['firmwareUpdate']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-output=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['firmwareUpdate']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['lockDoor']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-output=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['lockDoor']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['unlockDoor']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-output=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['unlockDoor']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['ASCD']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ASCD']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ActiveParkAssist']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ActiveParkAssist']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['AdaptiveCruiseControl']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['AdaptiveCruiseControl']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['AutomaticBrakeActuator']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['AutomaticBrakeActuator']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['BlindSpotDetection']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['BlindSpotDetection']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CentralComputer']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CentralComputer']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CollisionSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CollisionSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CrossTrafficAlert']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CrossTrafficAlert']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['DrowsinessSensors']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['DrowsinessSensors']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontAirbagSensors']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontAirbagSensors']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontObjectCCDCameraURI']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontObjectCCDCameraURI']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontObjectLaserRadar']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontObjectLaserRadar']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['LaneDepartureSystem']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['LaneDepartureSystem']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NightVision']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NightVision']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NighttimePedestrianIRSensorURI']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NighttimePedestrianIRSensorURI']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NighttimePedestrianWarning']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NighttimePedestrianWarning']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearCamera']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearCamera']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearObjectLaserRadar']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearObjectLaserRadar']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearObjectMonitorCCDCamera']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearObjectMonitorCCDCamera']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['SideCurtainSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['SideCurtainSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['SteeringAngleSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['SteeringAngleSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['TirePressureSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['TirePressureSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['WheelSpeedSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['WheelSpeedSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_uncertainty']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_uncertainty']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['brake'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['brake'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['firmwareUpdate'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['firmwareUpdate'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['ASCD']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ASCD']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ActiveParkAssist']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ActiveParkAssist']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['AdaptiveCruiseControl']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['AdaptiveCruiseControl']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['AutomaticBrakeActuator']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['AutomaticBrakeActuator']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['BlindSpotDetection']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['BlindSpotDetection']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CentralComputer']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CentralComputer']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CollisionSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CollisionSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CrossTrafficAlert']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CrossTrafficAlert']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['DrowsinessSensors']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['DrowsinessSensors']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontAirbagSensors']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontAirbagSensors']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontObjectCCDCameraURI']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontObjectCCDCameraURI']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontObjectLaserRadar']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontObjectLaserRadar']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['LaneDepartureSystem']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['LaneDepartureSystem']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NightVision']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NightVision']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NighttimePedestrianIRSensorURI']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NighttimePedestrianIRSensorURI']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NighttimePedestrianWarning']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NighttimePedestrianWarning']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearCamera']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearCamera']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearObjectLaserRadar']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearObjectLaserRadar']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearObjectMonitorCCDCamera']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearObjectMonitorCCDCamera']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['SideCurtainSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['SideCurtainSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['SteeringAngleSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['SteeringAngleSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['TirePressureSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['TirePressureSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['WheelSpeedSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['WheelSpeedSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_uncertainty']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_uncertainty']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['brake'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['brake'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['brake'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['brake'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['firmwareUpdate'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['firmwareUpdate'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['firmwareUpdate'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['firmwareUpdate'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['lockDoor'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['lockDoor'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['unlockDoor'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['unlockDoor'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
[ { keyword: 'const',
    dataPath: ".actions['brake']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-safe=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['brake']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['firmwareUpdate']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-safe=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['firmwareUpdate']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['lockDoor']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-safe=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['lockDoor']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['unlockDoor']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-safe=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['unlockDoor']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['ASCD']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ASCD']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ActiveParkAssist']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ActiveParkAssist']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['AdaptiveCruiseControl']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['AdaptiveCruiseControl']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['AutomaticBrakeActuator']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['AutomaticBrakeActuator']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['BlindSpotDetection']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['BlindSpotDetection']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CentralComputer']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CentralComputer']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CollisionSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CollisionSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CrossTrafficAlert']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CrossTrafficAlert']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['DrowsinessSensors']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['DrowsinessSensors']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontAirbagSensors']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontAirbagSensors']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontObjectCCDCameraURI']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontObjectCCDCameraURI']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontObjectLaserRadar']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontObjectLaserRadar']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['LaneDepartureSystem']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['LaneDepartureSystem']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NightVision']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NightVision']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NighttimePedestrianIRSensorURI']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NighttimePedestrianIRSensorURI']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NighttimePedestrianWarning']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NighttimePedestrianWarning']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearCamera']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearCamera']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearObjectLaserRadar']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearObjectLaserRadar']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearObjectMonitorCCDCamera']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearObjectMonitorCCDCamera']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['SideCurtainSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['SideCurtainSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['SteeringAngleSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['SteeringAngleSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['TirePressureSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['TirePressureSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['WheelSpeedSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['WheelSpeedSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_uncertainty']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_uncertainty']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['brake']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['brake']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['firmwareUpdate']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['firmwareUpdate']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['lockDoor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['lockDoor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['unlockDoor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['unlockDoor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['ASCD']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ASCD']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ActiveParkAssist']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ActiveParkAssist']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['AdaptiveCruiseControl']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['AdaptiveCruiseControl']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['AutomaticBrakeActuator']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['AutomaticBrakeActuator']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['BlindSpotDetection']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['BlindSpotDetection']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CentralComputer']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CentralComputer']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CollisionSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CollisionSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CrossTrafficAlert']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CrossTrafficAlert']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['DrowsinessSensors']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['DrowsinessSensors']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontAirbagSensors']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontAirbagSensors']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontObjectCCDCameraURI']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontObjectCCDCameraURI']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontObjectLaserRadar']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontObjectLaserRadar']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['LaneDepartureSystem']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['LaneDepartureSystem']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NightVision']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NightVision']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NighttimePedestrianIRSensorURI']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NighttimePedestrianIRSensorURI']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NighttimePedestrianWarning']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NighttimePedestrianWarning']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearCamera']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearCamera']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearObjectLaserRadar']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearObjectLaserRadar']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearObjectMonitorCCDCamera']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearObjectMonitorCCDCamera']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['SideCurtainSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['SideCurtainSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['SteeringAngleSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['SteeringAngleSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['TirePressureSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['TirePressureSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['WheelSpeedSensor']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['WheelSpeedSensor']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_uncertainty']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_uncertainty']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['brake'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['brake'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['firmwareUpdate'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['firmwareUpdate'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['ASCD']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ASCD']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ActiveParkAssist']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ActiveParkAssist']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['AdaptiveCruiseControl']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['AdaptiveCruiseControl']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['AutomaticBrakeActuator']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['AutomaticBrakeActuator']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['BlindSpotDetection']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['BlindSpotDetection']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CentralComputer']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CentralComputer']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CollisionSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CollisionSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['CrossTrafficAlert']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['CrossTrafficAlert']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['DrowsinessSensors']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['DrowsinessSensors']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontAirbagSensors']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontAirbagSensors']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontObjectCCDCameraURI']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontObjectCCDCameraURI']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['FrontObjectLaserRadar']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['FrontObjectLaserRadar']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['LaneDepartureSystem']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['LaneDepartureSystem']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NightVision']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NightVision']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NighttimePedestrianIRSensorURI']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NighttimePedestrianIRSensorURI']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['NighttimePedestrianWarning']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['NighttimePedestrianWarning']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearCamera']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearCamera']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearObjectLaserRadar']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearObjectLaserRadar']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['RearObjectMonitorCCDCamera']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['RearObjectMonitorCCDCamera']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['SideCurtainSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['SideCurtainSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['SteeringAngleSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['SteeringAngleSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['TirePressureSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['TirePressureSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['WheelSpeedSensor']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['WheelSpeedSensor']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_uncertainty']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_uncertainty']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['brake'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['brake'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['brake'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['brake'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['firmwareUpdate'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['firmwareUpdate'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['firmwareUpdate'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['firmwareUpdate'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['lockDoor'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['lockDoor'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['unlockDoor'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['unlockDoor'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Connected_Car_Shared.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Connected_Car_Shared.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Connected_Car_Shared.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Connected_Car_Shared.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Connected_Car_Shared.csv
    Processing instance Oracle/oracle-simulators/Festo_Shared
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Festo_Shared.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Festo_Shared.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Festo_Shared.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Festo_Shared.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Festo_Shared.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Festo_Shared.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Festo_Shared.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Festo_Shared.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Festo_Shared.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Festo_Shared.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
[ { keyword: 'const',
    dataPath: ".actions['OpenValve']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['OpenValve']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
[ { keyword: 'const',
    dataPath: ".actions['CloseValve']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['CloseValve']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['OpenValve']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['OpenValve']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['StartPump']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['StartPump']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['StopPump']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['StopPump']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/else/then/const',
    params: { allowedValue: 'td-additional-contexts=not-impl' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
[ { keyword: 'const',
    dataPath: ".actions['OpenValve']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['OpenValve']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-action=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['PumpStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['PumpStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101MaximumLevelStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101MaximumLevelStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101MinimumLevelStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101MinimumLevelStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101OverflowStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101OverflowStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank102LevelValue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank102LevelValue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank102OverflowStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank102OverflowStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ValveStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ValveStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['PumpStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['PumpStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101MaximumLevelStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101MaximumLevelStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101MinimumLevelStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101MinimumLevelStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101OverflowStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101OverflowStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank102LevelValue']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank102LevelValue']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank102OverflowStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank102OverflowStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ValveStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ValveStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['PumpStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['PumpStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101MaximumLevelStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101MaximumLevelStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101MinimumLevelStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101MinimumLevelStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101OverflowStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101OverflowStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank102LevelValue']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank102LevelValue']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank102OverflowStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank102OverflowStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ValveStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ValveStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['PumpStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['PumpStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101MaximumLevelStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101MaximumLevelStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101MinimumLevelStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101MinimumLevelStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101OverflowStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101OverflowStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank102LevelValue']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank102LevelValue']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank102OverflowStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank102OverflowStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ValveStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ValveStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['PumpStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['PumpStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101MaximumLevelStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101MaximumLevelStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101MinimumLevelStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101MinimumLevelStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101OverflowStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101OverflowStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank102LevelValue']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank102LevelValue']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank102OverflowStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank102OverflowStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ValveStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ValveStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['PumpStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['PumpStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101MaximumLevelStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101MaximumLevelStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101MinimumLevelStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101MinimumLevelStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101OverflowStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101OverflowStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank102LevelValue']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank102LevelValue']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank102OverflowStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank102OverflowStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ValveStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ValveStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['PumpStatus'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['PumpStatus'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101MaximumLevelStatus'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101MaximumLevelStatus'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101MinimumLevelStatus'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101MinimumLevelStatus'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101OverflowStatus'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101OverflowStatus'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank102LevelValue'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank102LevelValue'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank102OverflowStatus'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank102OverflowStatus'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ValveStatus'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ValveStatus'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['CloseValve'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['CloseValve'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['OpenValve'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['OpenValve'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['StartPump'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['StartPump'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['StopPump'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['StopPump'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['PumpStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['PumpStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101MaximumLevelStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101MaximumLevelStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101MinimumLevelStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101MinimumLevelStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101OverflowStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101OverflowStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank102LevelValue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank102LevelValue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank102OverflowStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank102OverflowStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ValveStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ValveStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['CloseValve']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['CloseValve']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['OpenValve']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['OpenValve']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['StartPump']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['StartPump']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['StopPump']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['StopPump']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
[ { keyword: 'const',
    dataPath: ".actions['CloseValve']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['CloseValve']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['OpenValve']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['OpenValve']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['StartPump']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['StartPump']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['StopPump']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['StopPump']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['basic_sc']",
    schemaPath: '#/definitions/securityScheme/then/const',
    params: { allowedValue: 'td-vocab-in=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['basic_sc']",
    schemaPath: '#/definitions/securityScheme/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
[ { keyword: 'const',
    dataPath: ".actions['CloseValve']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-input=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['CloseValve']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['OpenValve']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-input=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['OpenValve']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['StartPump']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-input=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['StartPump']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['StopPump']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-input=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['StopPump']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['PumpStatus'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['PumpStatus'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101MaximumLevelStatus'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101MaximumLevelStatus'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101MinimumLevelStatus'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101MinimumLevelStatus'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101OverflowStatus'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101OverflowStatus'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank102LevelValue'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank102LevelValue'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank102OverflowStatus'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank102OverflowStatus'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ValveStatus'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ValveStatus'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
[ { keyword: 'const',
    dataPath: ".actions['CloseValve']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-output=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['CloseValve']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['OpenValve']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-output=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['OpenValve']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['StartPump']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-output=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['StartPump']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['StopPump']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-output=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['StopPump']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['PumpStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['PumpStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101MaximumLevelStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101MaximumLevelStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101MinimumLevelStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101MinimumLevelStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101OverflowStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101OverflowStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank102LevelValue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank102LevelValue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank102OverflowStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank102OverflowStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ValveStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ValveStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['CloseValve'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['CloseValve'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['OpenValve'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['OpenValve'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['StartPump'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['StartPump'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['StopPump'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['StopPump'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['PumpStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['PumpStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101MaximumLevelStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101MaximumLevelStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101MinimumLevelStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101MinimumLevelStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101OverflowStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101OverflowStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank102LevelValue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank102LevelValue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank102OverflowStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank102OverflowStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ValveStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ValveStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['CloseValve'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['CloseValve'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['CloseValve'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['CloseValve'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['OpenValve'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['OpenValve'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['OpenValve'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['OpenValve'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['StartPump'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['StartPump'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['StartPump'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['StartPump'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['StopPump'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['StopPump'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['StopPump'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['StopPump'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
[ { keyword: 'const',
    dataPath: ".actions['CloseValve']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-safe=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['CloseValve']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['OpenValve']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-safe=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['OpenValve']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['StartPump']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-safe=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['StartPump']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['StopPump']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-safe=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['StopPump']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['PumpStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['PumpStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101MaximumLevelStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101MaximumLevelStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101MinimumLevelStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101MinimumLevelStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101OverflowStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101OverflowStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank102LevelValue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank102LevelValue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank102OverflowStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank102OverflowStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ValveStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ValveStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['CloseValve']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['CloseValve']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['OpenValve']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['OpenValve']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['StartPump']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['StartPump']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['StopPump']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['StopPump']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['PumpStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['PumpStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101MaximumLevelStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101MaximumLevelStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101MinimumLevelStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101MinimumLevelStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101OverflowStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101OverflowStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank102LevelValue']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank102LevelValue']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank102OverflowStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank102OverflowStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ValveStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ValveStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['CloseValve'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['CloseValve'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['OpenValve'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['OpenValve'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['StartPump'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['StartPump'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['StopPump'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['StopPump'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['PumpStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['PumpStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101MaximumLevelStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101MaximumLevelStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101MinimumLevelStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101MinimumLevelStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank101OverflowStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank101OverflowStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank102LevelValue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank102LevelValue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['Tank102OverflowStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Tank102OverflowStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ValveStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ValveStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['CloseValve'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['CloseValve'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['CloseValve'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['CloseValve'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['OpenValve'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['OpenValve'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['OpenValve'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['OpenValve'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['StartPump'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['StartPump'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['StartPump'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['StartPump'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['StopPump'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['StopPump'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['StopPump'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['StopPump'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Festo_Shared.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Festo_Shared.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Festo_Shared.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Festo_Shared.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Festo_Shared.csv
    Processing instance Oracle/oracle-simulators/HVAC_Shared
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/HVAC_Shared.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/HVAC_Shared.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/HVAC_Shared.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/HVAC_Shared.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/HVAC_Shared.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/HVAC_Shared.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/HVAC_Shared.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/HVAC_Shared.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/HVAC_Shared.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/HVAC_Shared.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
[ { keyword: 'const',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
[ { keyword: 'const',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/else/then/const',
    params: { allowedValue: 'td-additional-contexts=not-impl' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
[ { keyword: 'const',
    dataPath: ".properties['motorAmperage']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motorAmperage']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oilViscosity']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oilViscosity']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['outputTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['outputTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['targetTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['targetTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['time']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['time']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['vibration']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['vibration']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-action=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['motorAmperage']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motorAmperage']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oilViscosity']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oilViscosity']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['outputTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['outputTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['targetTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['targetTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['time']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['time']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['vibration']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['vibration']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
[ { keyword: 'const',
    dataPath: ".properties['motorAmperage']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motorAmperage']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oilViscosity']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oilViscosity']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['outputTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['outputTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['targetTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['targetTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['time']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['time']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['vibration']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['vibration']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['motorAmperage']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motorAmperage']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oilViscosity']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oilViscosity']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['outputTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['outputTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['targetTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['targetTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['time']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['time']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['vibration']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['vibration']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['motorAmperage']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motorAmperage']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oilViscosity']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oilViscosity']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['outputTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['outputTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['targetTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['targetTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['time']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['time']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['vibration']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['vibration']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['motorAmperage']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motorAmperage']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oilViscosity']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oilViscosity']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['outputTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['outputTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['targetTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['targetTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['time']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['time']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['vibration']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['vibration']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['motorAmperage']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motorAmperage']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oilViscosity']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oilViscosity']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['outputTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['outputTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['targetTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['targetTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['time']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['time']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['vibration']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['vibration']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['motorAmperage']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motorAmperage']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oilViscosity']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oilViscosity']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['outputTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['outputTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['targetTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['targetTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['time']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['time']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['vibration']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['vibration']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['motorAmperage'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motorAmperage'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oilViscosity'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oilViscosity'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['outputTemp'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['outputTemp'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['targetTemp'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['targetTemp'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['time'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['time'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['vibration'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['vibration'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['motorAmperage']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motorAmperage']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oilViscosity']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oilViscosity']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['outputTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['outputTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['targetTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['targetTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['time']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['time']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['vibration']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['vibration']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
[ { keyword: 'const',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['basic_sc']",
    schemaPath: '#/definitions/securityScheme/then/const',
    params: { allowedValue: 'td-vocab-in=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['basic_sc']",
    schemaPath: '#/definitions/securityScheme/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
[ { keyword: 'const',
    dataPath: ".actions['power']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-input=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['motorAmperage'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motorAmperage'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oilViscosity'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oilViscosity'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['outputTemp'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['outputTemp'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['targetTemp'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['targetTemp'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['time'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['time'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['vibration'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['vibration'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
[ { keyword: 'const',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-output=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['motorAmperage']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motorAmperage']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oilViscosity']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oilViscosity']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['outputTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['outputTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['targetTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['targetTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['time']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['time']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['vibration']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['vibration']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['motorAmperage']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motorAmperage']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oilViscosity']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oilViscosity']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['outputTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['outputTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['targetTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['targetTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['time']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['time']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['vibration']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['vibration']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
[ { keyword: 'const',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-safe=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['motorAmperage']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motorAmperage']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oilViscosity']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oilViscosity']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['outputTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['outputTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['targetTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['targetTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['time']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['time']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['vibration']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['vibration']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['motorAmperage']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motorAmperage']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oilViscosity']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oilViscosity']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['outputTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['outputTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['targetTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['targetTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['time']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['time']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['vibration']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['vibration']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['motorAmperage']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['motorAmperage']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oilViscosity']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oilViscosity']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['outputTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['outputTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['targetTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['targetTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['time']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['time']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['vibration']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['vibration']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['power'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['power'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/HVAC_Shared.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/HVAC_Shared.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/HVAC_Shared.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/HVAC_Shared.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/HVAC_Shared.csv
    Processing instance Oracle/oracle-simulators/KETI_IoT_Sensor
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/KETI_IoT_Sensor.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/KETI_IoT_Sensor.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/KETI_IoT_Sensor.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/KETI_IoT_Sensor.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/KETI_IoT_Sensor.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/KETI_IoT_Sensor.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/KETI_IoT_Sensor.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/KETI_IoT_Sensor.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/KETI_IoT_Sensor.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/KETI_IoT_Sensor.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/else/then/const',
    params: { allowedValue: 'td-additional-contexts=not-impl' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-action=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['co2']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['co2']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['humidity']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['humidity']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['light']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['light']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['microwave']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['microwave']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['sound']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['sound']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['voc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['voc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['co2']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['co2']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['humidity']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['humidity']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['light']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['light']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['microwave']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['microwave']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['sound']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['sound']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['voc']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['voc']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['co2']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['co2']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['humidity']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['humidity']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['light']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['light']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['microwave']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['microwave']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['sound']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['sound']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['voc']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['voc']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['co2']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['co2']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['humidity']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['humidity']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['light']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['light']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['microwave']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['microwave']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['sound']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['sound']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['voc']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['voc']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['co2']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['co2']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['humidity']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['humidity']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['light']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['light']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['microwave']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['microwave']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['sound']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['sound']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['voc']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['voc']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['co2']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['co2']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['humidity']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['humidity']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['light']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['light']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['microwave']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['microwave']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['sound']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['sound']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['voc']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['voc']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['co2'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['co2'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['humidity'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['humidity'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['light'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['light'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['microwave'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['microwave'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['sound'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['sound'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['voc'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['voc'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['co2']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['co2']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['humidity']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['humidity']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['light']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['light']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['microwave']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['microwave']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['sound']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['sound']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['voc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['voc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['basic_sc']",
    schemaPath: '#/definitions/securityScheme/then/const',
    params: { allowedValue: 'td-vocab-in=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['basic_sc']",
    schemaPath: '#/definitions/securityScheme/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['co2'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['co2'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['humidity'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['humidity'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['light'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['light'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['microwave'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['microwave'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['sound'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['sound'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['voc'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['voc'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['co2']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['co2']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['humidity']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['humidity']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['light']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['light']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['microwave']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['microwave']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['sound']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['sound']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['voc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['voc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['co2']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['co2']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['humidity']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['humidity']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['light']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['light']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['microwave']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['microwave']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['sound']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['sound']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['voc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['voc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['co2']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['co2']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['humidity']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['humidity']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['light']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['light']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['microwave']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['microwave']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['sound']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['sound']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['voc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['voc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['co2']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['co2']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['humidity']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['humidity']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['light']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['light']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['microwave']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['microwave']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['sound']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['sound']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['voc']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['voc']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['co2']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['co2']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['humidity']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['humidity']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['light']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['light']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['microwave']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['microwave']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['sound']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['sound']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['voc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['voc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/KETI_IoT_Sensor.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/KETI_IoT_Sensor.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/KETI_IoT_Sensor.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/KETI_IoT_Sensor.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/KETI_IoT_Sensor.csv
    Processing instance Oracle/oracle-simulators/Truck_Shared
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Truck_Shared.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Truck_Shared.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Truck_Shared.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Truck_Shared.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Truck_Shared.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Truck_Shared.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Truck_Shared.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Truck_Shared.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Truck_Shared.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Truck_Shared.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/else/then/const',
    params: { allowedValue: 'td-additional-contexts=not-impl' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
[ { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_coolant_temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_coolant_temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_rpm']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_rpm']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_mass_air_flow']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_mass_air_flow']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_number_of_dtcs']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_number_of_dtcs']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_runtime_since_engine_start']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_runtime_since_engine_start']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_throttle_position']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_throttle_position']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_total_fuel_used']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_total_fuel_used']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_true_odometer']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_true_odometer']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_vehicle_speed']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_vehicle_speed']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-action=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_coolant_temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_coolant_temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_rpm']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_rpm']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_mass_air_flow']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_mass_air_flow']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_number_of_dtcs']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_number_of_dtcs']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_runtime_since_engine_start']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_runtime_since_engine_start']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_throttle_position']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_throttle_position']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_total_fuel_used']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_total_fuel_used']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_true_odometer']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_true_odometer']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_vehicle_speed']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_vehicle_speed']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
[ { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_coolant_temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_coolant_temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_rpm']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_rpm']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_mass_air_flow']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_mass_air_flow']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_number_of_dtcs']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_number_of_dtcs']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_runtime_since_engine_start']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_runtime_since_engine_start']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_throttle_position']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_throttle_position']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_total_fuel_used']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_total_fuel_used']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_true_odometer']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_true_odometer']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_vehicle_speed']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_vehicle_speed']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_coolant_temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_coolant_temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_rpm']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_rpm']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_mass_air_flow']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_mass_air_flow']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_number_of_dtcs']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_number_of_dtcs']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_runtime_since_engine_start']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_runtime_since_engine_start']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_throttle_position']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_throttle_position']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_total_fuel_used']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_total_fuel_used']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_true_odometer']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_true_odometer']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_vehicle_speed']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_vehicle_speed']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_coolant_temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_coolant_temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_rpm']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_rpm']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_mass_air_flow']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_mass_air_flow']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_number_of_dtcs']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_number_of_dtcs']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_runtime_since_engine_start']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_runtime_since_engine_start']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_throttle_position']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_throttle_position']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_total_fuel_used']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_total_fuel_used']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_true_odometer']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_true_odometer']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_vehicle_speed']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_vehicle_speed']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_coolant_temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_coolant_temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_rpm']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_rpm']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_mass_air_flow']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_mass_air_flow']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_number_of_dtcs']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_number_of_dtcs']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_runtime_since_engine_start']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_runtime_since_engine_start']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_throttle_position']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_throttle_position']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_total_fuel_used']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_total_fuel_used']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_true_odometer']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_true_odometer']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_vehicle_speed']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_vehicle_speed']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_coolant_temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_coolant_temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_rpm']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_rpm']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_mass_air_flow']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_mass_air_flow']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_number_of_dtcs']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_number_of_dtcs']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_runtime_since_engine_start']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_runtime_since_engine_start']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_throttle_position']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_throttle_position']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_total_fuel_used']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_total_fuel_used']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_true_odometer']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_true_odometer']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_vehicle_speed']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_vehicle_speed']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_coolant_temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_coolant_temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_rpm']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_rpm']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_mass_air_flow']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_mass_air_flow']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_number_of_dtcs']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_number_of_dtcs']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_runtime_since_engine_start']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_runtime_since_engine_start']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_throttle_position']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_throttle_position']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_total_fuel_used']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_total_fuel_used']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_true_odometer']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_true_odometer']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_vehicle_speed']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_vehicle_speed']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['ora_altitude'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_altitude'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_latitude'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_latitude'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_longitude'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_longitude'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath:
     ".properties['ora_obd2_engine_coolant_temperature'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".properties['ora_obd2_engine_coolant_temperature'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_rpm'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_rpm'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_mass_air_flow'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_mass_air_flow'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_number_of_dtcs'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_number_of_dtcs'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath:
     ".properties['ora_obd2_runtime_since_engine_start'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".properties['ora_obd2_runtime_since_engine_start'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_throttle_position'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_throttle_position'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_total_fuel_used'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_total_fuel_used'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_true_odometer'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_true_odometer'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_vehicle_speed'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_vehicle_speed'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_coolant_temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_coolant_temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_rpm']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_rpm']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_mass_air_flow']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_mass_air_flow']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_number_of_dtcs']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_number_of_dtcs']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_runtime_since_engine_start']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_runtime_since_engine_start']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_throttle_position']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_throttle_position']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_total_fuel_used']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_total_fuel_used']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_true_odometer']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_true_odometer']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_vehicle_speed']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_vehicle_speed']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['basic_sc']",
    schemaPath: '#/definitions/securityScheme/then/const',
    params: { allowedValue: 'td-vocab-in=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['basic_sc']",
    schemaPath: '#/definitions/securityScheme/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['ora_altitude'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_altitude'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_latitude'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_latitude'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_longitude'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_longitude'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath:
     ".properties['ora_obd2_engine_coolant_temperature'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".properties['ora_obd2_engine_coolant_temperature'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_rpm'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_rpm'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_mass_air_flow'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_mass_air_flow'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_number_of_dtcs'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_number_of_dtcs'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath:
     ".properties['ora_obd2_runtime_since_engine_start'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".properties['ora_obd2_runtime_since_engine_start'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_throttle_position'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_throttle_position'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_total_fuel_used'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_total_fuel_used'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_true_odometer'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_true_odometer'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_vehicle_speed'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_vehicle_speed'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_coolant_temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_coolant_temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_rpm']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_rpm']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_mass_air_flow']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_mass_air_flow']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_number_of_dtcs']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_number_of_dtcs']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_runtime_since_engine_start']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_runtime_since_engine_start']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_throttle_position']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_throttle_position']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_total_fuel_used']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_total_fuel_used']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_true_odometer']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_true_odometer']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_vehicle_speed']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_vehicle_speed']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_coolant_temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_coolant_temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_rpm']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_rpm']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_mass_air_flow']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_mass_air_flow']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_number_of_dtcs']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_number_of_dtcs']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_runtime_since_engine_start']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_runtime_since_engine_start']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_throttle_position']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_throttle_position']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_total_fuel_used']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_total_fuel_used']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_true_odometer']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_true_odometer']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_vehicle_speed']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_vehicle_speed']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_coolant_temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_coolant_temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_rpm']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_rpm']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_mass_air_flow']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_mass_air_flow']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_number_of_dtcs']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_number_of_dtcs']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_runtime_since_engine_start']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_runtime_since_engine_start']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_throttle_position']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_throttle_position']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_total_fuel_used']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_total_fuel_used']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_true_odometer']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_true_odometer']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_vehicle_speed']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_vehicle_speed']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_coolant_temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_coolant_temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_rpm']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_rpm']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_mass_air_flow']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_mass_air_flow']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_number_of_dtcs']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_number_of_dtcs']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_runtime_since_engine_start']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_runtime_since_engine_start']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_throttle_position']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_throttle_position']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_total_fuel_used']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_total_fuel_used']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_true_odometer']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_true_odometer']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_vehicle_speed']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_vehicle_speed']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_altitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_latitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_longitude']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_coolant_temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_coolant_temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_engine_rpm']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_engine_rpm']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_mass_air_flow']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_mass_air_flow']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_number_of_dtcs']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_number_of_dtcs']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_runtime_since_engine_start']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_runtime_since_engine_start']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_throttle_position']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_throttle_position']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_total_fuel_used']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_total_fuel_used']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_true_odometer']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_true_odometer']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['ora_obd2_vehicle_speed']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['ora_obd2_vehicle_speed']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Truck_Shared.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Truck_Shared.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Oracle/oracle-simulators/Truck_Shared.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Truck_Shared.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Truck_Shared.csv
>>>>>>>>>>>> Merge: /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Blue_Pump_Events.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Blue_Pump_Shared.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Connected_Car_Shared.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Festo_Shared.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/HVAC_Shared.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/KETI_IoT_Sensor.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Truck_Shared.csv
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Blue_Pump_Events.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Blue_Pump_Shared.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Connected_Car_Shared.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Festo_Shared.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/HVAC_Shared.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/KETI_IoT_Sensor.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators/Truck_Shared.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Oracle/oracle-simulators.csv
Processing organization Panasonic
  in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic
  Processing implementation Panasonic/panasonic-server-real
    under /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real
    Processing instance Panasonic/panasonic-server-real/airConditioner_p1
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/airConditioner_p1.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/airConditioner_p1.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/airConditioner_p1.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/airConditioner_p1.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/airConditioner_p1.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/airConditioner_p1.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/airConditioner_p1.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/airConditioner_p1.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/airConditioner_p1.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/airConditioner_p1.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
[ { keyword: 'const',
    dataPath: ".events['change']",
    schemaPath: '#/definitions/event_element/then/const',
    params: { allowedValue: 'td-event-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['change']",
    schemaPath: '#/definitions/event_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
[ { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-number-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-number-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['change'].data.properties['desiredTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-number-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['change'].data.properties['desiredTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['change'].data.properties['windVolumeLevel']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-number-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['change'].data.properties['windVolumeLevel']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".events['change'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-event=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
[ { keyword: 'const',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_enum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
[ { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_maximum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_maximum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
[ { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_minimum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_minimum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
[ { keyword: 'const',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-string-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['change'].data.properties['operationMode']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-string-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['change'].data.properties['operationMode']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".events['change'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-alg=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-authorization=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationStatus'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationStatus'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationMode'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationMode'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationMode'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['change'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['change'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
[ { keyword: 'const',
    dataPath: ".events['change']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-event-names_data=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['change']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
[ { keyword: 'const',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-enum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['change'].data.properties['operationMode']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-enum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['change'].data.properties['operationMode']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".events['change'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-format=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['change']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['change']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
[ { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['change'].data.properties['desiredTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['change'].data.properties['desiredTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['change'].data.properties['windVolumeLevel']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['change'].data.properties['windVolumeLevel']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".events['change'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
[ { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['change'].data.properties['desiredTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['change'].data.properties['desiredTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['change'].data.properties['windVolumeLevel']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['change'].data.properties['windVolumeLevel']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".events['change'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationStatus'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationMode'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationMode'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".events['change'].data",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['change'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationStatus'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationMode'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationMode'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationMode'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['change']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['change']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['change'].data",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['change'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/airConditioner_p1.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/airConditioner_p1.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/airConditioner_p1.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/airConditioner_p1.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/airConditioner_p1.csv
    Processing instance Panasonic/panasonic-server-real/cleaner_p1
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/cleaner_p1.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/cleaner_p1.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/cleaner_p1.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/cleaner_p1.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/cleaner_p1.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/cleaner_p1.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/cleaner_p1.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/cleaner_p1.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/cleaner_p1.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/cleaner_p1.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
[ { keyword: 'const',
    dataPath: ".actions['operationPower']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['operationPower']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnRight']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnRight']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnLeft']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnLeft']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['goStraight']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['goStraight']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['goHome']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['goHome']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['specifyArea']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['specifyArea']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
[ { keyword: 'const',
    dataPath: ".actions['specifyArea'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-number-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['specifyArea'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-action=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-alg=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-authorization=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".actions['operationPower'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['operationPower'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnRight'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnRight'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnLeft'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnLeft'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['goStraight'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['goStraight'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['goHome'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['goHome'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['specifyArea'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['specifyArea'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-format=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".actions['operationPower']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['operationPower']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnRight']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnRight']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnLeft']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnLeft']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['goStraight']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['goStraight']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['goHome']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['goHome']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['specifyArea']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['specifyArea']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
[ { keyword: 'const',
    dataPath: ".actions['goHome']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['goHome']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['specifyArea']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['specifyArea']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
[ { keyword: 'const',
    dataPath: ".actions['specifyArea']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-input=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['specifyArea']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
[ { keyword: 'const',
    dataPath: ".actions['specifyArea'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['specifyArea'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
[ { keyword: 'const',
    dataPath: ".actions['specifyArea'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['specifyArea'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".actions['operationPower']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['operationPower']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnRight']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnRight']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnLeft']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnLeft']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['goStraight']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['goStraight']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['goHome']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['goHome']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['specifyArea']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['specifyArea']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".actions['specifyArea'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['specifyArea'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/cleaner_p1.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/cleaner_p1.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/cleaner_p1.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/cleaner_p1.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/cleaner_p1.csv
    Processing instance Panasonic/panasonic-server-real/electricBulletinBoard_p1
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/electricBulletinBoard_p1.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/electricBulletinBoard_p1.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/electricBulletinBoard_p1.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/electricBulletinBoard_p1.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/electricBulletinBoard_p1.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/electricBulletinBoard_p1.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/electricBulletinBoard_p1.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/electricBulletinBoard_p1.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/electricBulletinBoard_p1.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/electricBulletinBoard_p1.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
[ { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-number-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
[ { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_maximum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
[ { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_minimum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-alg=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-authorization=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-format=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
[ { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
[ { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/electricBulletinBoard_p1.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/electricBulletinBoard_p1.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/electricBulletinBoard_p1.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/electricBulletinBoard_p1.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/electricBulletinBoard_p1.csv
    Processing instance Panasonic/panasonic-server-real/electricBulletinBoard_p2
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/electricBulletinBoard_p2.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/electricBulletinBoard_p2.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/electricBulletinBoard_p2.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/electricBulletinBoard_p2.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/electricBulletinBoard_p2.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/electricBulletinBoard_p2.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/electricBulletinBoard_p2.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/electricBulletinBoard_p2.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/electricBulletinBoard_p2.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/electricBulletinBoard_p2.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
[ { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-number-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
[ { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_maximum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
[ { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_minimum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-alg=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-authorization=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-format=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
[ { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
[ { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/electricBulletinBoard_p2.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/electricBulletinBoard_p2.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/electricBulletinBoard_p2.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/electricBulletinBoard_p2.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/electricBulletinBoard_p2.csv
    Processing instance Panasonic/panasonic-server-real/electricBulletinBoard_p3
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/electricBulletinBoard_p3.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/electricBulletinBoard_p3.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/electricBulletinBoard_p3.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/electricBulletinBoard_p3.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/electricBulletinBoard_p3.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/electricBulletinBoard_p3.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/electricBulletinBoard_p3.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/electricBulletinBoard_p3.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/electricBulletinBoard_p3.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/electricBulletinBoard_p3.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
[ { keyword: 'const',
    dataPath: ".properties['displayNumber']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-number-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['displayNumber']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['displayNumber']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['displayNumber']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
[ { keyword: 'const',
    dataPath: ".properties['displayNumber']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_maximum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['displayNumber']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
[ { keyword: 'const',
    dataPath: ".properties['displayNumber']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_minimum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['displayNumber']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['displayNumber']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['displayNumber']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['displayNumber']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['displayNumber']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-alg=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-authorization=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['displayNumber'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['displayNumber'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-format=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['displayNumber']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['displayNumber']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
[ { keyword: 'const',
    dataPath: ".properties['displayNumber']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['displayNumber']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
[ { keyword: 'const',
    dataPath: ".properties['displayNumber']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['displayNumber']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['displayNumber']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['displayNumber']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['displayNumber']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['displayNumber']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/electricBulletinBoard_p3.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/electricBulletinBoard_p3.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/electricBulletinBoard_p3.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/electricBulletinBoard_p3.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/electricBulletinBoard_p3.csv
    Processing instance Panasonic/panasonic-server-real/huegroup_p1
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/huegroup_p1.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/huegroup_p1.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/huegroup_p1.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/huegroup_p1.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/huegroup_p1.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/huegroup_p1.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/huegroup_p1.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/huegroup_p1.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/huegroup_p1.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/huegroup_p1.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-alg=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-authorization=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationStatus'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationStatus'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-format=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
[ { keyword: 'const',
    dataPath: ".properties['rgbValue'].properties['red']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue'].properties['red']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue'].properties['green']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue'].properties['green']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue'].properties['blue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue'].properties['blue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
[ { keyword: 'const',
    dataPath: ".properties['rgbValue'].properties['red']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue'].properties['red']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue'].properties['green']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue'].properties['green']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue'].properties['blue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue'].properties['blue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationStatus'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationStatus'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationStatus']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/huegroup_p1.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/huegroup_p1.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-real/huegroup_p1.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/huegroup_p1.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/huegroup_p1.csv
>>>>>>>>>>>> Merge: /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/airConditioner_p1.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/cleaner_p1.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/electricBulletinBoard_p1.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/electricBulletinBoard_p2.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/electricBulletinBoard_p3.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/huegroup_p1.csv
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/airConditioner_p1.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/cleaner_p1.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/electricBulletinBoard_p1.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/electricBulletinBoard_p2.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/electricBulletinBoard_p3.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real/huegroup_p1.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-real.csv
  Processing implementation Panasonic/panasonic-server-simulator
    under /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator
    Processing instance Panasonic/panasonic-server-simulator/PanaSimAirConditioner5
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimAirConditioner5.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimAirConditioner5.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimAirConditioner5.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimAirConditioner5.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimAirConditioner5.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimAirConditioner5.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimAirConditioner5.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimAirConditioner5.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimAirConditioner5.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimAirConditioner5.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
[ { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-number-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-number-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['power']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
[ { keyword: 'const',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_enum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
[ { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_maximum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_maximum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
[ { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_minimum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_minimum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['power']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['power']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
[ { keyword: 'const',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-string-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-alg=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-authorization=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['power'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['power'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['power'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationMode'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationMode'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationMode'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
[ { keyword: 'const',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-enum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-format=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['power']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
[ { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
[ { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['power'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['power'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationMode'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationMode'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['power'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['power'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationMode'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationMode'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
[ { keyword: 'const',
    dataPath: ".properties['power'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationMode'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['power']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['power']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['operationMode']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['desiredTemp']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['windVolumeLevel']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimAirConditioner5.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimAirConditioner5.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimAirConditioner5.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimAirConditioner5.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimAirConditioner5.csv
    Processing instance Panasonic/panasonic-server-simulator/PanaSimCleaner5
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimCleaner5.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimCleaner5.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimCleaner5.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimCleaner5.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimCleaner5.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimCleaner5.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimCleaner5.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimCleaner5.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimCleaner5.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimCleaner5.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
[ { keyword: 'const',
    dataPath: ".actions['operationPower']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['operationPower']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnRight']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnRight']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnLeft']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnLeft']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['goStraight']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['goStraight']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-action=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['power']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['power']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['power']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['power']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-alg=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-authorization=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['power'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['operationPower'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['operationPower'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnRight'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnRight'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnLeft'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnLeft'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['goStraight'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['goStraight'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['goHome'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['goHome'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-format=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['power']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['operationPower']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['operationPower']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnRight']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnRight']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnLeft']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnLeft']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['goStraight']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['goStraight']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['goHome']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['goHome']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
[ { keyword: 'const',
    dataPath: ".actions['operationPower']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['operationPower']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['goHome']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['goHome']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['power']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['power']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['operationPower']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['operationPower']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnRight']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnRight']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnLeft']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnLeft']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['goStraight']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['goStraight']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['power']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimCleaner5.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimCleaner5.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimCleaner5.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimCleaner5.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimCleaner5.csv
    Processing instance Panasonic/panasonic-server-simulator/PanaSimHueGroup5
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimHueGroup5.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimHueGroup5.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimHueGroup5.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimHueGroup5.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimHueGroup5.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimHueGroup5.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimHueGroup5.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimHueGroup5.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimHueGroup5.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimHueGroup5.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['power']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['power']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['power']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-alg=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-authorization=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['power'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['power'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['power'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-format=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['power']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
[ { keyword: 'const',
    dataPath: ".properties['rgbValue'].properties['red']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue'].properties['red']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue'].properties['green']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue'].properties['green']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue'].properties['blue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue'].properties['blue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
[ { keyword: 'const',
    dataPath: ".properties['rgbValue'].properties['red']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue'].properties['red']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue'].properties['green']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue'].properties['green']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue'].properties['blue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue'].properties['blue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['power'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['power'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['power'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['power'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
[ { keyword: 'const',
    dataPath: ".properties['power'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['power']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['power']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['rgbValue']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimHueGroup5.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimHueGroup5.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimHueGroup5.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimHueGroup5.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimHueGroup5.csv
    Processing instance Panasonic/panasonic-server-simulator/PanaSimRoomLight5
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimRoomLight5.jsonld
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimRoomLight5.jsonld
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimRoomLight5.jsonld /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimRoomLight5.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimRoomLight5.jsonld" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimRoomLight5.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimRoomLight5.jsonld
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimRoomLight5.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimRoomLight5.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimRoomLight5.jsonld  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
[ { keyword: 'const',
    dataPath: ".events['alert']",
    schemaPath: '#/definitions/event_element/then/const',
    params: { allowedValue: 'td-event-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['alert']",
    schemaPath: '#/definitions/event_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['detect']",
    schemaPath: '#/definitions/event_element/then/const',
    params: { allowedValue: 'td-event-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['detect']",
    schemaPath: '#/definitions/event_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
[ { keyword: 'const',
    dataPath: ".properties['luminance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-number-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['luminance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-event=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['power']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['color']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['color']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['luminance']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['luminance']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
[ { keyword: 'const',
    dataPath: ".properties['color']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_enum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['color']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['luminance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['luminance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['power']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['color']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['color']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['luminance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['luminance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['power']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['color']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['color']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['luminance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['luminance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
[ { keyword: 'const',
    dataPath: ".properties['color']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-string-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['color']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['alert'].data.properties['message']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-string-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['alert'].data.properties['message']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".events['alert'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-alg=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-authorization=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['power'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['power'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['power'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['color'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['color'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['color'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['color'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['color'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['color'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['luminance'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['luminance'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['alert'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['alert'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['alert'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['alert'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['alert'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['alert'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['detect'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['detect'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['detect'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['detect'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['detect'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['detect'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
[ { keyword: 'const',
    dataPath: ".events['alert']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-event-names_data=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['alert']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['detect']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-event-names_data=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['detect']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
[ { keyword: 'const',
    dataPath: ".properties['color']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-enum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['color']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-format=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['bearer_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['power']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['color']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['color']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['luminance']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['luminance']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['alert']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['alert']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['detect']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['detect']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['power'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['power'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['color'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['color'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['color'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['color'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".events['alert'].data",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['alert'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['luminance']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['luminance']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
[ { keyword: 'const',
    dataPath: ".properties['power'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['power'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['color'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['color'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['color'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['color'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['alert'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['alert'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['alert'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['alert'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['detect'].forms[1]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['detect'].forms[1]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['detect'].forms[2]",
    schemaPath: '#/definitions/form_element/then/const',
    params: { allowedValue: 'td-vocab-security-3=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['detect'].forms[2]",
    schemaPath: '#/definitions/form_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
[ { keyword: 'const',
    dataPath: ".properties['power'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['color'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['color'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['alert'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['alert'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['alert'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['alert'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['detect'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['detect'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['detect'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['detect'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['power']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['color']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['color']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['luminance']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['luminance']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['alert']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['alert']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['detect']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['detect']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['power']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['power']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['color']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['color']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['luminance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['luminance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['alert'].data",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['alert'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['detect'].data",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['detect'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimRoomLight5.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimRoomLight5.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Panasonic/panasonic-server-simulator/PanaSimRoomLight5.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimRoomLight5.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimRoomLight5.csv
>>>>>>>>>>>> Merge: /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimAirConditioner5.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimCleaner5.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimHueGroup5.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimRoomLight5.csv
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimAirConditioner5.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimCleaner5.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimHueGroup5.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator/PanaSimRoomLight5.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Panasonic/panasonic-server-simulator.csv
Processing organization Siemens
  in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens
  Processing implementation Siemens/siemens-node-wot
    under /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot
    Processing instance Siemens/siemens-node-wot/dataSchemaTest-siemens
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/dataSchemaTest-siemens.json
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/dataSchemaTest-siemens.json
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/dataSchemaTest-siemens.json /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/dataSchemaTest-siemens.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/dataSchemaTest-siemens.json" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/dataSchemaTest-siemens.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/dataSchemaTest-siemens.json
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/dataSchemaTest-siemens.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/dataSchemaTest-siemens.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/dataSchemaTest-siemens.json  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['fullData']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['constValue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['constValue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oneOfTest']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_descriptions=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-integer-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['fullData']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['constValue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['constValue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oneOfTest']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
[ { keyword: 'const',
    dataPath: ".properties['constValue']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_const=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['constValue']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['fullData']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['constValue']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['constValue']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oneOfTest']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_descriptions=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_enum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
[ { keyword: 'const',
    dataPath: ".properties['oneOfTest']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_oneOf=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['fullData']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['fullData']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['constValue']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['constValue']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oneOfTest']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
[ { keyword: 'const',
    dataPath: ".properties['fullData']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_titles=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['fullData']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_unit=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['fullData']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['constValue']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['constValue']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oneOfTest']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-string-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-title-description_descriptions=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-title-description_titles=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
[ { keyword: 'const',
    dataPath: ".properties['constValue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-const=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['constValue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: '.forms[0]',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.forms[0]',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: '.forms[1]',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.forms[1]',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['fullData'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['fullData'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['fullData'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['fullData'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['fullData'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['fullData'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['constValue'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['constValue'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['constValue'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['constValue'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['constValue'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['constValue'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['constValue'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['constValue'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['constValue'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['constValue'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['constValue'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['constValue'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oneOfTest'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oneOfTest'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oneOfTest'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oneOfTest'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oneOfTest'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oneOfTest'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-descriptions=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-enum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oneOfTest'].oneOf[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-enum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest'].oneOf[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oneOfTest'].oneOf[1].items",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-enum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest'].oneOf[1].items",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest'].oneOf[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['fullData']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['constValue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['constValue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oneOfTest']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
[ { keyword: 'const',
    dataPath: ".properties['fullData'].properties['rgb']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-items=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData'].properties['rgb']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".properties['fullData']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath: ".properties['oneOfTest'].oneOf[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-items=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest'].oneOf[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
[ { keyword: 'const',
    dataPath: ".properties['fullData'].properties['rgb']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maxItems=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData'].properties['rgb']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".properties['fullData']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
[ { keyword: 'const',
    dataPath: ".properties['fullData'].properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData'].properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".properties['fullData']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
[ { keyword: 'const',
    dataPath: ".properties['fullData'].properties['waterLevel']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData'].properties['waterLevel']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['fullData'].properties['rgb'].items",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData'].properties['rgb'].items",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".properties['fullData'].properties['rgb']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".properties['fullData']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
[ { keyword: 'const',
    dataPath: ".properties['fullData'].properties['rgb']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minItems=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData'].properties['rgb']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".properties['fullData']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
[ { keyword: 'const',
    dataPath: ".properties['fullData'].properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData'].properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".properties['fullData']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
[ { keyword: 'const',
    dataPath: ".properties['fullData'].properties['waterLevel']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData'].properties['waterLevel']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['fullData'].properties['rgb'].items",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData'].properties['rgb'].items",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".properties['fullData'].properties['rgb']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".properties['fullData']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_titles=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
[ { keyword: 'const',
    dataPath: ".properties['oneOfTest']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-oneOf=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['fullData'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['fullData'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['fullData'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['fullData'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['fullData'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['fullData'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['constValue'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['constValue'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['constValue'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['constValue'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['constValue'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['constValue'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['constValue'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['constValue'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['constValue'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['constValue'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['constValue'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['constValue'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oneOfTest'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oneOfTest'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oneOfTest'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oneOfTest'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oneOfTest'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oneOfTest'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['fullData']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['fullData']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['constValue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['constValue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oneOfTest']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
[ { keyword: 'const',
    dataPath: ".properties['fullData']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-required=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['fullData'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['fullData'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['constValue'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['constValue'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['constValue'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['constValue'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oneOfTest'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oneOfTest'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-titles=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['fullData']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
[ { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-unit=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['temperature']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['temperature']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['fullData']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['fullData']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['constValue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['constValue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['oneOfTest']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['oneOfTest']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/dataSchemaTest-siemens.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/dataSchemaTest-siemens.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/dataSchemaTest-siemens.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/dataSchemaTest-siemens.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/dataSchemaTest-siemens.csv
    Processing instance Siemens/siemens-node-wot/eventTest-siemens
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/eventTest-siemens.json
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/eventTest-siemens.json
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/eventTest-siemens.json /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/eventTest-siemens.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/eventTest-siemens.json" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/eventTest-siemens.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/eventTest-siemens.json
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/eventTest-siemens.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/eventTest-siemens.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/eventTest-siemens.json  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
[ { keyword: 'const',
    dataPath: ".events['temperatureValueForT2T']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['temperatureValueForT2T']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
[ { keyword: 'const',
    dataPath: ".events['temperatureValueForT2T']",
    schemaPath: '#/definitions/event_element/then/const',
    params: { allowedValue: 'td-event-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['temperatureValueForT2T']",
    schemaPath: '#/definitions/event_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
[ { keyword: 'const',
    dataPath:
     ".events['temperatureValueForT2T'].subscription.properties['subscriptionID']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-integer-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".events['temperatureValueForT2T'].subscription.properties['subscriptionID']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".events['temperatureValueForT2T'].subscription",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath:
     ".events['temperatureValueForT2T'].cancellation.properties['subscriptionID']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-integer-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".events['temperatureValueForT2T'].cancellation.properties['subscriptionID']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".events['temperatureValueForT2T'].cancellation",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
[ { keyword: 'const',
    dataPath: ".events['temperatureValueForT2T'].data",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-number-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['temperatureValueForT2T'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-event=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/else/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/else/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/else/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
[ { keyword: 'const',
    dataPath:
     ".events['temperatureValueForT2T'].subscription.properties['targetURL']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-string-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".events['temperatureValueForT2T'].subscription.properties['targetURL']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".events['temperatureValueForT2T'].subscription",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
[ { keyword: 'const',
    dataPath: ".events['temperatureValueForT2T']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-event-names_cancellation=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['temperatureValueForT2T']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
[ { keyword: 'const',
    dataPath: ".events['temperatureValueForT2T']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-event-names_data=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['temperatureValueForT2T']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".events['temperatureValueForT2T']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['temperatureValueForT2T']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".events['temperatureValueForT2T'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['temperatureValueForT2T'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['temperatureValueForT2T'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['temperatureValueForT2T'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".events['temperatureValueForT2T'].subscription",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['temperatureValueForT2T'].subscription",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['temperatureValueForT2T'].cancellation",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['temperatureValueForT2T'].cancellation",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath:
     ".events['temperatureValueForT2T'].subscription.properties['subscriptionID']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".events['temperatureValueForT2T'].subscription.properties['subscriptionID']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".events['temperatureValueForT2T'].subscription",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
[ { keyword: 'const',
    dataPath: ".events['temperatureValueForT2T']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-event-names_subscription=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['temperatureValueForT2T']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".events['temperatureValueForT2T'].subscription",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['temperatureValueForT2T'].subscription",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['temperatureValueForT2T'].data",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['temperatureValueForT2T'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['temperatureValueForT2T'].cancellation",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['temperatureValueForT2T'].cancellation",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
[ { keyword: 'const',
    dataPath:
     ".events['temperatureValueForT2T'].subscription.properties['targetURL']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".events['temperatureValueForT2T'].subscription.properties['targetURL']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".events['temperatureValueForT2T'].subscription",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath:
     ".events['temperatureValueForT2T'].cancellation.properties['subscriptionID']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".events['temperatureValueForT2T'].cancellation.properties['subscriptionID']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".events['temperatureValueForT2T'].cancellation",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/eventTest-siemens.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/eventTest-siemens.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/eventTest-siemens.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/eventTest-siemens.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/eventTest-siemens.csv
    Processing instance Siemens/siemens-node-wot/fullInteractionsTest-siemens
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/fullInteractionsTest-siemens.json
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/fullInteractionsTest-siemens.json
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/fullInteractionsTest-siemens.json /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/fullInteractionsTest-siemens.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/fullInteractionsTest-siemens.json" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/fullInteractionsTest-siemens.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/fullInteractionsTest-siemens.json
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/fullInteractionsTest-siemens.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/fullInteractionsTest-siemens.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/fullInteractionsTest-siemens.json  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
[ { keyword: 'const',
    dataPath: ".properties['count']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
[ { keyword: 'const',
    dataPath: ".properties['count']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-integer-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['onchange'].data",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-integer-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['onchange'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-action=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-event=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['count']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
[ { keyword: 'const',
    dataPath: ".properties['count']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['count']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['count']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['count']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-title-description_descriptions=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-anchor=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['count'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['count'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['count'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['count'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['count'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['count'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['increment'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['increment'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['increment'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['increment'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['increment'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['increment'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['increment'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['increment'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['decrement'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['decrement'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['decrement'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['decrement'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['decrement'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['decrement'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['decrement'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['decrement'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['reset'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['reset'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['reset'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['reset'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['reset'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['reset'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['reset'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['reset'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['onchange'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['onchange'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['onchange'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['onchange'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['onchange'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['onchange'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['onchange'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['onchange'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['onchange'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['onchange'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['onchange'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['onchange'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
[ { keyword: 'const',
    dataPath: ".events['onchange']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-event-names_data=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['onchange']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-descriptions=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['count']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['increment']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['increment']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['decrement']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['decrement']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['reset']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['reset']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['onchange']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['onchange']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
[ { keyword: 'const',
    dataPath: ".actions['increment']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['increment']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['decrement']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['decrement']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['reset']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['reset']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['count'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['count'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['count'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['count'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['count'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['count'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['increment'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['increment'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['increment'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['increment'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['increment'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['increment'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['increment'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['increment'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['decrement'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['decrement'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['decrement'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['decrement'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['decrement'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['decrement'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['decrement'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['decrement'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['reset'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['reset'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['reset'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['reset'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['reset'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['reset'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['reset'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['reset'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['onchange'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['onchange'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['onchange'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['onchange'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['onchange'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['onchange'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['onchange'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['onchange'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['onchange'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['onchange'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['onchange'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['onchange'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['count']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-rel=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
[ { keyword: 'const',
    dataPath: ".actions['increment']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-safe=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['increment']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['decrement']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-safe=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['decrement']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['reset']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-safe=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['reset']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
[ { keyword: 'const',
    dataPath: ".properties['count'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['count'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['onchange'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['onchange'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['onchange'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['onchange'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
[ { keyword: 'const',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/then/const',
    params: { allowedValue: 'td-vocab-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.links[0]',
    schemaPath: '#/definitions/link_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['count']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['onchange'].data",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['onchange'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['count']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/fullInteractionsTest-siemens.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/fullInteractionsTest-siemens.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/fullInteractionsTest-siemens.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/fullInteractionsTest-siemens.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/fullInteractionsTest-siemens.csv
    Processing instance Siemens/siemens-node-wot/propertiesTest-siemens
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/propertiesTest-siemens.json
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/propertiesTest-siemens.json
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/propertiesTest-siemens.json /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/propertiesTest-siemens.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/propertiesTest-siemens.json" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/propertiesTest-siemens.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/propertiesTest-siemens.json
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/propertiesTest-siemens.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/propertiesTest-siemens.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/propertiesTest-siemens.json  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_descriptions=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
[ { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-integer-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_descriptions=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_enum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_titles=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-string-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-title-description_descriptions=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-title-description_titles=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-descriptions=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-enum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_titles=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-titles=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/propertiesTest-siemens.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/propertiesTest-siemens.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/propertiesTest-siemens.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/propertiesTest-siemens.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/propertiesTest-siemens.csv
    Processing instance Siemens/siemens-node-wot/readWriteAllProperties
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/readWriteAllProperties.json
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/readWriteAllProperties.json
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/readWriteAllProperties.json /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/readWriteAllProperties.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/readWriteAllProperties.json" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/readWriteAllProperties.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/readWriteAllProperties.json
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/readWriteAllProperties.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/readWriteAllProperties.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/readWriteAllProperties.json  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_descriptions=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
[ { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-integer-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_descriptions=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_enum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_titles=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-string-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-title-description_descriptions=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-title-description_titles=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: '.forms[0]',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.forms[0]',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-descriptions=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-enum=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_titles=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: '.forms[0]',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.forms[0]',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
[ { keyword: 'const',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-title=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-titles=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['status']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['status']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/readWriteAllProperties.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/readWriteAllProperties.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/readWriteAllProperties.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/readWriteAllProperties.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/readWriteAllProperties.csv
    Processing instance Siemens/siemens-node-wot/responseTest-siemens
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/responseTest-siemens.json
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/responseTest-siemens.json
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/responseTest-siemens.json /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/responseTest-siemens.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/responseTest-siemens.json" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/responseTest-siemens.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/responseTest-siemens.json
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/responseTest-siemens.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/responseTest-siemens.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/responseTest-siemens.json  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
[ { keyword: 'const',
    dataPath: ".actions['smileGenerator']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['smileGenerator']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
[ { keyword: 'const',
    dataPath: ".actions['smileGenerator']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['smileGenerator']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
[ { keyword: 'const',
    dataPath: ".actions['smileGenerator'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-integer-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['smileGenerator'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-action=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
[ { keyword: 'const',
    dataPath: ".actions['smileGenerator'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-string-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['smileGenerator'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".actions['smileGenerator'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['smileGenerator'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".actions['smileGenerator']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['smileGenerator']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
[ { keyword: 'const',
    dataPath: ".actions['smileGenerator']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-input=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['smileGenerator']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
[ { keyword: 'const',
    dataPath: ".actions['smileGenerator']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-output=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['smileGenerator']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
[ { keyword: 'const',
    dataPath: ".actions['smileGenerator'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-response=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['smileGenerator'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".actions['smileGenerator'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['smileGenerator'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['smileGenerator'].output",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['smileGenerator'].output",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/responseTest-siemens.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/responseTest-siemens.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/responseTest-siemens.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/responseTest-siemens.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/responseTest-siemens.csv
    Processing instance Siemens/siemens-node-wot/securityTest-siemens
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/securityTest-siemens.json
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/securityTest-siemens.json
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/securityTest-siemens.json /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/securityTest-siemens.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/securityTest-siemens.json" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/securityTest-siemens.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/securityTest-siemens.json
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/securityTest-siemens.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/securityTest-siemens.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/securityTest-siemens.json  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
[ { keyword: 'const',
    dataPath: ".properties['secret']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['secret']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['secret']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['secret']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
[ { keyword: 'const',
    dataPath: ".properties['secret']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['secret']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['secret']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['secret']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['secret']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['secret']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['secret']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['secret']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
[ { keyword: 'const',
    dataPath: ".properties['secret']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-string-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['secret']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['secret'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['secret'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['secret'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['secret'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['secret']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['secret']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['basic_sc']",
    schemaPath: '#/definitions/securityScheme/then/const',
    params: { allowedValue: 'td-vocab-in=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['basic_sc']",
    schemaPath: '#/definitions/securityScheme/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['secret'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['secret'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['secret'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['secret'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['secret']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['secret']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['secret']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['secret']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['secret']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['secret']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/securityTest-siemens.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/securityTest-siemens.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/securityTest-siemens.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/securityTest-siemens.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/securityTest-siemens.csv
    Processing instance Siemens/siemens-node-wot/uriVariablesTest-siemens
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/uriVariablesTest-siemens.json
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/uriVariablesTest-siemens.json
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/uriVariablesTest-siemens.json /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/uriVariablesTest-siemens.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/uriVariablesTest-siemens.json" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/uriVariablesTest-siemens.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/uriVariablesTest-siemens.json
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/uriVariablesTest-siemens.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/uriVariablesTest-siemens.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/uriVariablesTest-siemens.json  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
[ { keyword: 'const',
    dataPath: ".actions['increment']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['increment']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['decrement']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['decrement']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
[ { keyword: 'const',
    dataPath: ".actions['increment']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_uriVariables=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['increment']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['decrement']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_uriVariables=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['decrement']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
[ { keyword: 'const',
    dataPath: ".properties['count']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['increment']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['increment']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['decrement']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['decrement']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
[ { keyword: 'const',
    dataPath: ".properties['count']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-integer-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-action=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['count']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
[ { keyword: 'const',
    dataPath: ".properties['count']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['count']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['count']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['count']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: '.forms[0]',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.forms[0]',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: '.forms[1]',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '.forms[1]',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['count'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['count'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['count'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['count'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['count'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['count'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['increment'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['increment'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['increment'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['increment'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['increment'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['increment'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['increment'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['increment'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['decrement'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['decrement'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['decrement'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['decrement'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['decrement'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['decrement'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['decrement'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['decrement'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['reset'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['reset'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['reset'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['reset'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['reset'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['reset'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['reset'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['reset'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['count']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['increment']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['increment']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['decrement']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['decrement']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['reset']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['reset']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
[ { keyword: 'const',
    dataPath: ".actions['increment']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['increment']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['decrement']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['decrement']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['reset']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['reset']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['count'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['count'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['count'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['count'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['count'].forms[4]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count'].forms[4]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['count'].forms[5]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count'].forms[5]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['increment'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['increment'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['increment'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['increment'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['increment'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['increment'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['increment'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['increment'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['decrement'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['decrement'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['decrement'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['decrement'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['decrement'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['decrement'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['decrement'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['decrement'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['reset'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['reset'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['reset'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['reset'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['reset'].forms[2]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['reset'].forms[2]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['reset'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['reset'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['count']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
[ { keyword: 'const',
    dataPath: ".actions['increment']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-safe=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['increment']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['decrement']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-safe=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['decrement']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['reset']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-safe=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['reset']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
[ { keyword: 'const',
    dataPath: ".properties['count'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['count'].forms[3]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-subprotocol=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count'].forms[3]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['count']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
[ { keyword: 'const',
    dataPath: ".actions['increment']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-uriVariables=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['increment']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['decrement']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-uriVariables=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['decrement']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['count']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['count']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/uriVariablesTest-siemens.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/uriVariablesTest-siemens.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/Siemens/siemens-node-wot/uriVariablesTest-siemens.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/uriVariablesTest-siemens.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/uriVariablesTest-siemens.csv
>>>>>>>>>>>> Merge: /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/dataSchemaTest-siemens.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/eventTest-siemens.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/fullInteractionsTest-siemens.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/propertiesTest-siemens.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/readWriteAllProperties.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/responseTest-siemens.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/securityTest-siemens.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/uriVariablesTest-siemens.csv
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/dataSchemaTest-siemens.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/eventTest-siemens.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/fullInteractionsTest-siemens.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/propertiesTest-siemens.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/readWriteAllProperties.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/responseTest-siemens.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/securityTest-siemens.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot/uriVariablesTest-siemens.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/Siemens/siemens-node-wot.csv
Processing organization SmartThings
  in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings
  Processing implementation SmartThings/st-td-huelight
    in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/st-td-huelight.json
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/st-td-huelight.json
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/st-td-huelight.json /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/st-td-huelight.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/st-td-huelight.json" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/st-td-huelight.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/st-td-huelight.json
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/st-td-huelight.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/st-td-huelight.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/st-td-huelight.json  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
[ { keyword: 'const',
    dataPath: ".actions['turnon']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnon']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnoff']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnoff']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['setlevel']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['setlevel']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['steplevel']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['steplevel']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
[ { keyword: 'const',
    dataPath: ".properties['onoff']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['onoff']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnon']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnon']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnoff']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnoff']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['setlevel']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['setlevel']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['steplevel']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['steplevel']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
[ { keyword: 'const',
    dataPath: ".actions['setlevel'].input.properties['bri']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-integer-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input.properties['bri']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath: ".actions['steplevel'].input.properties['bri_inc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-integer-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['steplevel'].input.properties['bri_inc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['steplevel'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
[ { keyword: 'const',
    dataPath: ".actions['setlevel'].input.properties['transitiontime']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-number-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input.properties['transitiontime']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath: ".actions['steplevel'].input.properties['transitiontime']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-number-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['steplevel'].input.properties['transitiontime']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['steplevel'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-action=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['state']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['onoff']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['onoff']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
[ { keyword: 'const',
    dataPath: ".properties['onoff']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['onoff']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['state']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['onoff']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['onoff']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['state']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['onoff']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['onoff']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['state']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['onoff']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['onoff']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['state']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['onoff']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['onoff']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
[ { keyword: 'const',
    dataPath: ".actions['turnon'].input.properties['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-const=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnon'].input.properties['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['turnon'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnoff'].input.properties['on']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-const=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnoff'].input.properties['on']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['turnoff'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['state'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['onoff'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['onoff'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnon'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnon'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnoff'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnoff'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['setlevel'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['steplevel'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['steplevel'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['state']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['onoff']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['onoff']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnon']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnon']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnoff']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnoff']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['setlevel']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['setlevel']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['steplevel']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['steplevel']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
[ { keyword: 'const',
    dataPath: ".actions['turnon']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnon']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnoff']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnoff']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['setlevel']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['setlevel']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['steplevel']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['steplevel']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
[ { keyword: 'const',
    dataPath: ".actions['turnon']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-input=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnon']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnoff']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-input=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnoff']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['setlevel']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-input=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['setlevel']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['steplevel']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-input=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['steplevel']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
[ { keyword: 'const',
    dataPath: ".properties['state'].properties['state'].properties['bri']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state'].properties['state'].properties['bri']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['state'].properties['state'].properties['hue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state'].properties['state'].properties['hue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['state'].properties['state'].properties['sat']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state'].properties['state'].properties['sat']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['state'].properties['state'].properties['ct']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state'].properties['state'].properties['ct']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".properties['state'].properties['state']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".properties['state']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath: ".actions['setlevel'].input.properties['transitiontime']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input.properties['transitiontime']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath: ".actions['steplevel'].input.properties['transitiontime']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['steplevel'].input.properties['transitiontime']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['steplevel'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
[ { keyword: 'const',
    dataPath: ".properties['brightness'].properties['bri']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].properties['bri']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath: ".actions['setlevel'].input.properties['bri']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input.properties['bri']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath: ".actions['steplevel'].input.properties['bri_inc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['steplevel'].input.properties['bri_inc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['steplevel'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
[ { keyword: 'const',
    dataPath: ".properties['state'].properties['state'].properties['bri']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state'].properties['state'].properties['bri']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['state'].properties['state'].properties['hue']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state'].properties['state'].properties['hue']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['state'].properties['state'].properties['sat']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state'].properties['state'].properties['sat']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['state'].properties['state'].properties['ct']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state'].properties['state'].properties['ct']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".properties['state'].properties['state']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".properties['state']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath: ".actions['setlevel'].input.properties['transitiontime']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input.properties['transitiontime']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath: ".actions['steplevel'].input.properties['transitiontime']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['steplevel'].input.properties['transitiontime']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['steplevel'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
[ { keyword: 'const',
    dataPath: ".properties['brightness'].properties['bri']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].properties['bri']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath: ".actions['setlevel'].input.properties['bri']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input.properties['bri']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath: ".actions['steplevel'].input.properties['bri_inc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['steplevel'].input.properties['bri_inc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['steplevel'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnon'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnon'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnoff'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnoff'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['setlevel'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['steplevel'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['steplevel'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['state']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['onoff']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['onoff']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
[ { keyword: 'const',
    dataPath: ".actions['turnon']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-safe=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnon']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnoff']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-safe=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnoff']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['setlevel']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-safe=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['setlevel']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['steplevel']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-safe=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['steplevel']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['state']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['onoff']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['onoff']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnon'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnon'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnoff'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnoff'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['setlevel'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['steplevel'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['steplevel'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['state']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['onoff']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['onoff']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/st-td-huelight.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/st-td-huelight.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/st-td-huelight.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/st-td-huelight.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/st-td-huelight.csv
  Processing implementation SmartThings/st-td-tradfri-light
    in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/st-td-tradfri-light.json
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/st-td-tradfri-light.json
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/st-td-tradfri-light.json /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/st-td-tradfri-light.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/st-td-tradfri-light.json" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/st-td-tradfri-light.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/st-td-tradfri-light.json
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/st-td-tradfri-light.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/st-td-tradfri-light.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/st-td-tradfri-light.json  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
[ { keyword: 'const',
    dataPath: ".actions['turnon']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnon']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnoff']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnoff']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['setlevel']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-action-arrays_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['setlevel']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
[ { keyword: 'const',
    dataPath: ".properties['onoff']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['onoff']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnon']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnon']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnoff']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnoff']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['setlevel']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-data-schema_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['setlevel']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
[ { keyword: 'const',
    dataPath:
     ".actions['setlevel'].input.properties['3311'].items.properties['5851']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-number-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".actions['setlevel'].input.properties['3311'].items.properties['5851']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input.properties['3311'].items",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input.properties['3311']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-action=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['state']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['onoff']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['onoff']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
[ { keyword: 'const',
    dataPath: ".properties['onoff']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['onoff']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
[ { keyword: 'const',
    dataPath: ".properties['state']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['onoff']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['onoff']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_properties=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['state']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['onoff']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['onoff']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['state']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['onoff']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['onoff']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['state']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['onoff']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['onoff']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
[ { keyword: 'const',
    dataPath:
     ".actions['turnon'].input.properties['3311'].items.properties['5850']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-const=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".actions['turnon'].input.properties['3311'].items.properties['5850']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['turnon'].input.properties['3311'].items",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".actions['turnon'].input.properties['3311']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".actions['turnon'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath:
     ".actions['turnoff'].input.properties['3311'].items.properties['5850']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-const=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".actions['turnoff'].input.properties['3311'].items.properties['5850']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['turnoff'].input.properties['3311'].items",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".actions['turnoff'].input.properties['3311']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".actions['turnoff'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['state'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['onoff'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['onoff'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnon'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnon'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnoff'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnoff'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['setlevel'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-description=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['state']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['onoff']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['onoff']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnon']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnon']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnoff']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnoff']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['setlevel']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['setlevel']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
[ { keyword: 'const',
    dataPath: ".actions['turnon']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnon']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnoff']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnoff']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['setlevel']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-idempotent=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['setlevel']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
[ { keyword: 'const',
    dataPath: ".securityDefinitions['psk_sc']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-identity=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".securityDefinitions['psk_sc']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
[ { keyword: 'const',
    dataPath: ".actions['turnon']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-input=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnon']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnoff']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-input=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnoff']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['setlevel']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-input=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['setlevel']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
[ { keyword: 'const',
    dataPath: ".properties['state'].properties['3311']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-items=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state'].properties['3311']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".properties['state']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath: ".properties['onoff'].properties['3311']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-items=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['onoff'].properties['3311']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".properties['onoff']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness'].properties['3311']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-items=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].properties['3311']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnon'].input.properties['3311']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-items=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnon'].input.properties['3311']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['turnon'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnoff'].input.properties['3311']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-items=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnoff'].input.properties['3311']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['turnoff'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath: ".actions['setlevel'].input.properties['3311']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-items=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input.properties['3311']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
[ { keyword: 'const',
    dataPath:
     ".properties['state'].properties['3311'].items.properties['5851']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".properties['state'].properties['3311'].items.properties['5851']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".properties['state'].properties['3311'].items",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".properties['state'].properties['3311']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".properties['state']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath:
     ".properties['brightness'].properties['3311'].items.properties['5851']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".properties['brightness'].properties['3311'].items.properties['5851']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].properties['3311'].items",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].properties['3311']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath:
     ".actions['setlevel'].input.properties['3311'].items.properties['5851']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-maximum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".actions['setlevel'].input.properties['3311'].items.properties['5851']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input.properties['3311'].items",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input.properties['3311']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
[ { keyword: 'const',
    dataPath:
     ".properties['state'].properties['3311'].items.properties['5851']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".properties['state'].properties['3311'].items.properties['5851']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".properties['state'].properties['3311'].items",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".properties['state'].properties['3311']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".properties['state']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath:
     ".properties['brightness'].properties['3311'].items.properties['5851']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".properties['brightness'].properties['3311'].items.properties['5851']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].properties['3311'].items",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".properties['brightness'].properties['3311']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath:
     ".actions['setlevel'].input.properties['3311'].items.properties['5851']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-minimum-1=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".actions['setlevel'].input.properties['3311'].items.properties['5851']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input.properties['3311'].items",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input.properties['3311']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['state'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".actions['turnon'].input.properties['3311'].items",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnon'].input.properties['3311'].items",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['turnon'].input.properties['3311']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".actions['turnon'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnoff'].input.properties['3311'].items",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnoff'].input.properties['3311'].items",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['turnoff'].input.properties['3311']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".actions['turnoff'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath: ".actions['setlevel'].input.properties['3311'].items",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input.properties['3311'].items",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input.properties['3311']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['state']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['onoff']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['onoff']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
[ { keyword: 'const',
    dataPath: ".actions['turnon']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-safe=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnon']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnoff']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-safe=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnoff']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['setlevel']",
    schemaPath: '#/definitions/action_element/then/const',
    params: { allowedValue: 'td-vocab-safe=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['setlevel']",
    schemaPath: '#/definitions/action_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['state']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['onoff']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['onoff']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnon'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnon'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['turnoff'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['turnoff'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".actions['setlevel'].input",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".actions['setlevel'].input",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['state']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['state']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['onoff']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['onoff']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['brightness']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['brightness']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/st-td-tradfri-light.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/st-td-tradfri-light.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/st-td-tradfri-light.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/st-td-tradfri-light.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/st-td-tradfri-light.csv
  Processing implementation SmartThings/impl-node-red
    under /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/impl-node-red
    Processing instance SmartThings/impl-node-red/td-illuminance
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/impl-node-red/td-illuminance.json
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/impl-node-red/td-illuminance.json
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/impl-node-red/td-illuminance.json /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/impl-node-red/td-illuminance.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/impl-node-red/td-illuminance.json" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/impl-node-red/td-illuminance.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/impl-node-red/td-illuminance.json
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/impl-node-red/td-illuminance.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/impl-node-red/td-illuminance.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/impl-node-red/td-illuminance.json  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
[ { keyword: 'const',
    dataPath:
     ".events['IlluminanceChangeEvent'].data.items.properties['vb']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-number-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".events['IlluminanceChangeEvent'].data.items.properties['vb']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".events['IlluminanceChangeEvent'].data.items",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".events['IlluminanceChangeEvent'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-event=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['Illuminance']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Illuminance']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
[ { keyword: 'const',
    dataPath: ".properties['Illuminance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_items=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Illuminance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['Illuminance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Illuminance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['Illuminance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Illuminance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['Illuminance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Illuminance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
[ { keyword: 'const',
    dataPath:
     ".events['IlluminanceChangeEvent'].data.items.properties['n']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-string-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".events['IlluminanceChangeEvent'].data.items.properties['n']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".events['IlluminanceChangeEvent'].data.items",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".events['IlluminanceChangeEvent'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
[ { keyword: 'const',
    dataPath: ".properties['Illuminance'].items.properties['n']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-const=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Illuminance'].items.properties['n']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".properties['Illuminance'].items",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".properties['Illuminance']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath:
     ".events['IlluminanceChangeEvent'].data.items.properties['n']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-const=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath:
     ".events['IlluminanceChangeEvent'].data.items.properties['n']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".events['IlluminanceChangeEvent'].data.items",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".events['IlluminanceChangeEvent'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['Illuminance'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Illuminance'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['IlluminanceChangeEvent'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['IlluminanceChangeEvent'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
[ { keyword: 'const',
    dataPath: ".events['IlluminanceChangeEvent']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-event-names_data=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['IlluminanceChangeEvent']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['Illuminance']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Illuminance']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['IlluminanceChangeEvent']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['IlluminanceChangeEvent']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
[ { keyword: 'const',
    dataPath: ".properties['Illuminance']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-items=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Illuminance']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['IlluminanceChangeEvent'].data",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-items=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['IlluminanceChangeEvent'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".events['IlluminanceChangeEvent'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['IlluminanceChangeEvent'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".events['IlluminanceChangeEvent'].data.items",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['IlluminanceChangeEvent'].data.items",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".events['IlluminanceChangeEvent'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['Illuminance']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Illuminance']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['Illuminance']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Illuminance']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['IlluminanceChangeEvent'].data",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['IlluminanceChangeEvent'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['Illuminance']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['Illuminance']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/impl-node-red/td-illuminance.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/impl-node-red/td-illuminance.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/impl-node-red/td-illuminance.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/impl-node-red/td-illuminance.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/impl-node-red/td-illuminance.csv
    Processing instance SmartThings/impl-node-red/td-motion-event
      in /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/impl-node-red/td-motion-event.json
>>>>>>>>>>>> Processing: /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/impl-node-red/td-motion-event.json
npm run-script testTD /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/impl-node-red/td-motion-event.json /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/impl-node-red/td-motion-event.csv

> tdplayground@1.0.0 testTD /home/mmccool/Dev/wot/testing/tools/thingweb-playground/AssertionTester
> node assertionTester.js "/home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/impl-node-red/td-motion-event.json" "/home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/impl-node-red/td-motion-event.csv"

Taking input  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/impl-node-red/td-motion-event.json
Taking output  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/impl-node-red/td-motion-event.csv
Validating a single TD and outputting result to  /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/impl-node-red/td-motion-event.csv
=================================================================
Taking TD found at  /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/impl-node-red/td-motion-event.json  for validation
JSON validation... OK
test result is  true
Taking Assertion Schema found at  ./Assertions/td-action-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-action-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-action-names_description.json
Taking Assertion Schema found at  ./Assertions/td-action-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-action-names_title.json
Taking Assertion Schema found at  ./Assertions/td-action-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-action-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-actions_existence.json
Taking Assertion Schema found at  ./Assertions/td-additional-contexts.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-at-type.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-at-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-context.json
[ { keyword: 'const',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/then/const',
    params: { allowedValue: 'td-additional-contexts=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: "['@context']",
    schemaPath: '#/then/properties/%40context/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-data-schema_description.json
Taking Assertion Schema found at  ./Assertions/td-data-schema_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_forms.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_scopes.json
Taking Assertion Schema found at  ./Assertions/td-event-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-event-names_description.json
Taking Assertion Schema found at  ./Assertions/td-event-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-event-names_title.json
Taking Assertion Schema found at  ./Assertions/td-event-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-event-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-events_existence.json
Taking Assertion Schema found at  ./Assertions/td-integer-type.json
Taking Assertion Schema found at  ./Assertions/td-links.json
Taking Assertion Schema found at  ./Assertions/td-number-type.json
Taking Assertion Schema found at  ./Assertions/td-op-for-action.json
Taking Assertion Schema found at  ./Assertions/td-op-for-event.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-event=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-property.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-op-for-property=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-op-for-thing.json
Taking Assertion Schema found at  ./Assertions/td-properties_existence.json
Taking Assertion Schema found at  ./Assertions/td-property-arrays_forms.json
[ { keyword: 'const',
    dataPath: ".properties['MotionState']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-property-arrays_scopes=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['MotionState']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-arrays_security.json
Taking Assertion Schema found at  ./Assertions/td-property-names_const.json
Taking Assertion Schema found at  ./Assertions/td-property-names_description.json
Taking Assertion Schema found at  ./Assertions/td-property-names_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-property-names_enum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_items.json
[ { keyword: 'const',
    dataPath: ".properties['MotionState']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_items=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['MotionState']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_maxItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_maximum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minItems.json
Taking Assertion Schema found at  ./Assertions/td-property-names_minimum.json
Taking Assertion Schema found at  ./Assertions/td-property-names_oneOf.json
Taking Assertion Schema found at  ./Assertions/td-property-names_properties.json
Taking Assertion Schema found at  ./Assertions/td-property-names_readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['MotionState']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['MotionState']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_required.json
Taking Assertion Schema found at  ./Assertions/td-property-names_scopes.json
Taking Assertion Schema found at  ./Assertions/td-property-names_title.json
Taking Assertion Schema found at  ./Assertions/td-property-names_titles.json
Taking Assertion Schema found at  ./Assertions/td-property-names_type.json
[ { keyword: 'const',
    dataPath: ".properties['MotionState']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['MotionState']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-property-names_unit.json
Taking Assertion Schema found at  ./Assertions/td-property-names_uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-property-names_writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['MotionState']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-property-names_writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['MotionState']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-simple-form.json
[ { keyword: 'const',
    dataPath: '',
    schemaPath: '#/else/then/const',
    params: { allowedValue: 'td-simple-form=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/else/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: '',
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-string-type.json
[ { keyword: 'const',
    dataPath: ".events['MotionEvent'].data.items.properties['n']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-string-type=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['MotionEvent'].data.items.properties['n']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".events['MotionEvent'].data.items",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".events['MotionEvent'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-title-description_descriptions.json
Taking Assertion Schema found at  ./Assertions/td-title-description_titles.json
Taking Assertion Schema found at  ./Assertions/td-version.json
Taking Assertion Schema found at  ./Assertions/td-vocab-alg.json
Taking Assertion Schema found at  ./Assertions/td-vocab-anchor.json
Taking Assertion Schema found at  ./Assertions/td-vocab-authorization.json
Taking Assertion Schema found at  ./Assertions/td-vocab-base.json
Taking Assertion Schema found at  ./Assertions/td-vocab-cancellation.json
Taking Assertion Schema found at  ./Assertions/td-vocab-const.json
[ { keyword: 'const',
    dataPath: ".properties['MotionState'].items.properties['n']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-const=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['MotionState'].items.properties['n']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".properties['MotionState'].items",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".properties['MotionState']",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'const',
    dataPath: ".events['MotionEvent'].data.items.properties['n']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-const=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['MotionEvent'].data.items.properties['n']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".events['MotionEvent'].data.items",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' },
  { keyword: 'if',
    dataPath: ".events['MotionEvent'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-contentType-2.json
[ { keyword: 'const',
    dataPath: ".properties['MotionState'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['MotionState'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['MotionState'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['MotionState'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['MotionEvent'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-contentType-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['MotionEvent'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-created.json
Taking Assertion Schema found at  ./Assertions/td-vocab-data.json
[ { keyword: 'const',
    dataPath: ".events['MotionEvent']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-event-names_data=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['MotionEvent']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-description.json
Taking Assertion Schema found at  ./Assertions/td-vocab-descriptions.json
Taking Assertion Schema found at  ./Assertions/td-vocab-enum.json
Taking Assertion Schema found at  ./Assertions/td-vocab-flow.json
Taking Assertion Schema found at  ./Assertions/td-vocab-format.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-forms-2.json
[ { keyword: 'const',
    dataPath: ".properties['MotionState']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['MotionState']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['MotionEvent']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-forms-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['MotionEvent']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-idempotent.json
Taking Assertion Schema found at  ./Assertions/td-vocab-identity.json
Taking Assertion Schema found at  ./Assertions/td-vocab-in.json
Taking Assertion Schema found at  ./Assertions/td-vocab-input.json
Taking Assertion Schema found at  ./Assertions/td-vocab-items.json
[ { keyword: 'const',
    dataPath: ".properties['MotionState']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-items=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['MotionState']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['MotionEvent'].data",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-items=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['MotionEvent'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-lastModified.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maxItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-maximum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minItems.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-minimum-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-name-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-observable.json
Taking Assertion Schema found at  ./Assertions/td-vocab-oneOf.json
Taking Assertion Schema found at  ./Assertions/td-vocab-op.json
[ { keyword: 'const',
    dataPath: ".properties['MotionState'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['MotionState'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".properties['MotionState'].forms[1]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['MotionState'].forms[1]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['MotionEvent'].forms[0]",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-op=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['MotionEvent'].forms[0]",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-output.json
Taking Assertion Schema found at  ./Assertions/td-vocab-properties-2.json
[ { keyword: 'const',
    dataPath: ".events['MotionEvent'].data.items",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-properties-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['MotionEvent'].data.items",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'if',
    dataPath: ".events['MotionEvent'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'else' },
    message: 'should match "else" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-proxy.json
Taking Assertion Schema found at  ./Assertions/td-vocab-qop.json
Taking Assertion Schema found at  ./Assertions/td-vocab-readOnly.json
[ { keyword: 'const',
    dataPath: ".properties['MotionState']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-readOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['MotionState']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-refresh.json
Taking Assertion Schema found at  ./Assertions/td-vocab-rel.json
Taking Assertion Schema found at  ./Assertions/td-vocab-required.json
Taking Assertion Schema found at  ./Assertions/td-vocab-response.json
Taking Assertion Schema found at  ./Assertions/td-vocab-safe.json
Taking Assertion Schema found at  ./Assertions/td-vocab-scopes.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-2.json
Taking Assertion Schema found at  ./Assertions/td-vocab-security-3.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subprotocol.json
Taking Assertion Schema found at  ./Assertions/td-vocab-subscription.json
Taking Assertion Schema found at  ./Assertions/td-vocab-support.json
Taking Assertion Schema found at  ./Assertions/td-vocab-title.json
Taking Assertion Schema found at  ./Assertions/td-vocab-titles.json
Taking Assertion Schema found at  ./Assertions/td-vocab-token.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-1.json
Taking Assertion Schema found at  ./Assertions/td-vocab-type-2.json
[ { keyword: 'const',
    dataPath: ".properties['MotionState']",
    schemaPath: '#/definitions/property_element/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['MotionState']",
    schemaPath: '#/definitions/property_element/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' },
  { keyword: 'const',
    dataPath: ".events['MotionEvent'].data",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-type-2=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".events['MotionEvent'].data",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
Taking Assertion Schema found at  ./Assertions/td-vocab-unit.json
Taking Assertion Schema found at  ./Assertions/td-vocab-uriVariables.json
Taking Assertion Schema found at  ./Assertions/td-vocab-writeOnly.json
[ { keyword: 'const',
    dataPath: ".properties['MotionState']",
    schemaPath: '#/then/const',
    params: { allowedValue: 'td-vocab-writeOnly=pass' },
    message: 'should be equal to constant' },
  { keyword: 'if',
    dataPath: ".properties['MotionState']",
    schemaPath: '#/if',
    params: { failingKeyword: 'then' },
    message: 'should match "then" schema' } ]
The csv was saved!
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/impl-node-red/td-motion-event.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/impl-node-red/td-motion-event.{csv,CSV}.temp
mv /home/mmccool/Dev/wot/testfest/2019-02-princeton/inputs/SmartThings/impl-node-red/td-motion-event.{csv,CSV}.temp /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/impl-node-red/td-motion-event.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/impl-node-red/td-motion-event.csv
>>>>>>>>>>>> Merge: /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/impl-node-red/td-illuminance.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/impl-node-red/td-motion-event.csv
node mergeResults.js /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/impl-node-red/td-illuminance.csv /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/impl-node-red/td-motion-event.csv > /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/impl-node-red.csv
<<<<<<<<<<<< Output written to /home/mmccool/Dev/wot/testfest/2019-02-princeton/outputs/SmartThings/impl-node-red.csv
