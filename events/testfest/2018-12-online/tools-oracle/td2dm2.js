// Author: Michael.Lagally@oracle.com
// Created: 19.3.2018
// Last modified: 10.9.2018

"use strict";

var fs = require("fs");
var path = require("path");
var baseDir = ".";

//console.log(`td-dm started`);

if (process.argv.length<3) {
	   console.log ("Usage: node td2dm.js <thingDescr.jsonld> [-v]");
	   console.log ("Example: node td2dm.js TDs/Festo_Plant.jsonld");
	   process.exit (-1);
	}

var filename=process.argv[2];

var verbose=process.argv[3] ==="-v";

var content=fs.readFileSync('./'+filename);
var path=filename.substring(0, filename.lastIndexOf("/"));
// get package directory name
var pkg=path.substring(path.lastIndexOf("/")+1);
pkg = "oracle";
// strip path and extension
var plainfn=path.substring(filename.lastIndexOf("/")+1, filename.lastIndexOf("."));

var td=JSON.parse(content);
if (verbose) console.log(td);

if (verbose) console.log("-----");

var dm={};
dm.name=td.name;
dm.description=td.base;
dm.urn="urn:com:"+pkg+":"+td.name;

var now=new Date(Date.now());
dm.createdAsString=now.toISOString();
dm.created=now.valueOf();
dm.lastModifiedAsString=now.toISOString();
dm.lastModified=now.valueOf();
dm.userLastModified="auto-generated by td2dm converter";
dm.attributes=[];
dm.actions=[];
//dm.formats=[];
//dm.links=[];

var prop={};

for (var p in td.properties) {
    if (verbose) console.log(p);
		var res=convertProperty (td.properties[p], "");
		dm.attributes[res.name]=res;
}

if (verbose) {
	console.log(prop);
	console.log("-----");
}

// TODO: Add parameter handling of actions
for (var a in td.actions) {
    if (verbose) console.log(iac);
    var act={};
    act.name=a;
    var iac=td.actions[a];
    if (iac.label) {
        act.description=iac.label;
    } else {
        act.description=iac.title;
    };

    dm.actions.push(act);
    if (verbose) console.log(act);
}

if (verbose) console.log("-----");

for (var e in td.events) {
    if (verbose) console.log(iac);
    var evt={};
    var iac=td.events[e];
    evt.name=e;
    evt.description=iac.description;
    if (verbose) console.log(act);
}
if (verbose) console.log("-----");

console.log(JSON.stringify(dm, null, "\t"));

function convertProperty (pr, prefix) {
	console.log("convertProperty:"+JSON.stringify(pr)+" prefix:"+prefix);
	var prop={};
	prop.name=p;
	prop.writable=pr.writable;

	if (pr.label) {
			prop.description=pr.label;
	} else {
			prop.description=pr.title;
	};

	if (pr.type == "object") {
		for (var q in pr.properties) {
				if (verbose) console.log("***** object with #elements:"+pr.properties[q]);
				prop.type="STRING";
				var res=convertProperty (pr.properties[q], prefix+"_"+q);
				prop[res.name]=res;
		}
	}
	else if (pr.type == "array") {
		if (verbose) console.log("***** array with #elements:"+pr.items.length);
		for (var i=0; i<pr.items.length; i++) {
			if (verbose) console.log(pr.items[i]);
			prop.type="STRING";
			var res = (convertProperty (pr.items[i], prefix+"_"+i));
			prop[res.name]=res;
		}
		prop.writable=td.properties[p].writable;
		dm.attributes.push(prop);
	} else {
		if (pr.properties) {
			if (pr.properties.type){
				prop.type=pr.properties.type.toUpperCase();
			} else {
 			  prop.type=pr.type.toUpperCase();
			}
		} else {
			prop.type=pr.type.toUpperCase();
		}
	}
	return prop;
}
